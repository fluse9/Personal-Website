[{"E:\\Career\\Personal Website\\personal-website\\src\\index.js":"1","E:\\Career\\Personal Website\\personal-website\\src\\reportWebVitals.js":"2","E:\\Career\\Personal Website\\personal-website\\src\\App.js":"3","E:\\Career\\Personal Website\\personal-website\\src\\Pages\\HomePage\\Home.js":"4","E:\\Career\\Personal Website\\personal-website\\src\\Pages\\Navbar\\Navbar.js":"5","E:\\Career\\Personal Website\\personal-website\\src\\Pages\\MyAccount\\Notifications.js":"6","E:\\Career\\Personal Website\\personal-website\\src\\Pages\\MyAccount\\Dashboard.js":"7","E:\\Career\\Personal Website\\personal-website\\src\\Pages\\MyAccount\\Status.js":"8","E:\\Career\\Personal Website\\personal-website\\src\\Pages\\MyAccount\\Feedback.js":"9","E:\\Career\\Personal Website\\personal-website\\src\\Pages\\MyAccount\\MyProfile.js":"10","E:\\Career\\Personal Website\\personal-website\\src\\Pages\\Slider\\Slider.js":"11","E:\\Career\\Personal Website\\personal-website\\src\\Pages\\MyAccount\\DashboardNavbars.js":"12","E:\\Career\\Personal Website\\personal-website\\src\\Pages\\Slider\\SliderAlt.js":"13","E:\\Career\\Personal Website\\personal-website\\src\\Pages\\Trays\\Tray.js":"14"},{"size":548,"mtime":1613154055322,"results":"15","hashOfConfig":"16"},{"size":362,"mtime":499162500000,"results":"17","hashOfConfig":"16"},{"size":1387,"mtime":1613104794681,"results":"18","hashOfConfig":"16"},{"size":20988,"mtime":1613333920615,"results":"19","hashOfConfig":"16"},{"size":7146,"mtime":1613154435396,"results":"20","hashOfConfig":"16"},{"size":5035,"mtime":1613335165632,"results":"21","hashOfConfig":"16"},{"size":26878,"mtime":1613335165612,"results":"22","hashOfConfig":"16"},{"size":25900,"mtime":1613335165654,"results":"23","hashOfConfig":"16"},{"size":9038,"mtime":1613335165694,"results":"24","hashOfConfig":"16"},{"size":25382,"mtime":1613335165679,"results":"25","hashOfConfig":"16"},{"size":770,"mtime":1613154621056,"results":"26","hashOfConfig":"16"},{"size":6672,"mtime":1613335258765,"results":"27","hashOfConfig":"16"},{"size":958,"mtime":1613154619014,"results":"28","hashOfConfig":"16"},{"size":24295,"mtime":1613335165714,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1fd86u",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":40,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":37,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":37,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"32"},"E:\\Career\\Personal Website\\personal-website\\src\\index.js",[],["67","68"],"E:\\Career\\Personal Website\\personal-website\\src\\reportWebVitals.js",[],"E:\\Career\\Personal Website\\personal-website\\src\\App.js",["69","70","71","72","73","74"],"import React from 'react';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\nimport { Navbar, Nav, Jumbotron } from 'react-bootstrap';\nimport Scroll from 'react-scroll';\nimport HomePage from './Pages/HomePage/Home.js';\nimport PersonalNavbar from './Pages/Navbar/Navbar.js';\nimport Dashboard from './Pages/MyAccount/Dashboard.js';\nimport Status from './Pages/MyAccount/Status.js';\nimport Feedback from './Pages/MyAccount/Feedback.js';\nimport Notifications from './Pages/MyAccount/Notifications.js';\nimport MyProfile from './Pages/MyAccount/MyProfile.js';\n\nfunction App() {\n    return (\n        <Router>\n            <React.Fragment>\n                <header className=\"App-header\">\n                    <Switch>\n                        <Route path=\"/\" exact component={HomePage} />\n                        <Route path=\"/dashboard\" exact component={Dashboard} />\n                        <Route path=\"/dashboard/status\" exact component={Status} />\n                        <Route path=\"/dashboard/feedback\" exact component={Feedback} />\n                        <Route path=\"/dashboard/notifications\" exact component={Notifications} />\n                        <Route path=\"/dashboard/myprofile\" exact component={MyProfile} />\n                    </Switch>\n                </header>\n            </React.Fragment>\n        </Router>\n    );\n}\n\nexport default App;\n","E:\\Career\\Personal Website\\personal-website\\src\\Pages\\HomePage\\Home.js",["75","76","77","78","79","80","81","82","83"],"import React from 'react';\r\nimport { Navbar, Nav, Jumbotron } from 'react-bootstrap';\r\nimport \"./Home.css\";\r\nimport $ from 'jquery';\r\nimport emailjs from 'emailjs-com';\r\nimport profile from \"../../Assets/images/profile.jpg\";\r\nimport website from \"../../Assets/images/website.png\";\r\nimport web_app from \"../../Assets/images/web app.png\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faExternalLinkAlt, faEnvelope } from '@fortawesome/free-solid-svg-icons';\r\nimport GitHub from \"../../Assets/logos/GitHub.svg\";\r\nimport LinkedIn from \"../../Assets/logos/LinkedIn.svg\";\r\nimport { Link, Scroll } from 'react-scroll';\r\nimport PersonalNavbar from '../../Pages/Navbar/Navbar.js';\r\n\r\nclass Home extends React.Component {\r\n    state = {\r\n        workplace: 'Terrafarm',\r\n        value: 0,\r\n        terrafarm: '#EFF3FE',\r\n        terrafarm_text: \"#022140\",\r\n        ku: 'white',\r\n        ku_text: \"#6B6B6B\"\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.nameElement = React.createRef();\r\n        this.emailElement = React.createRef();\r\n        this.messageElement = React.createRef();\r\n    }\r\n\r\n    sendEmail = (event) => {\r\n        event.preventDefault();\r\n\r\n        var templateParams = {\r\n            name: this.nameElement.current.value,\r\n            email: this.emailElement.current.value,\r\n            message: this.messageElement.current.value\r\n        }\r\n\r\n        emailjs.send('service_hzh98vr', 'template_amg52h3', templateParams, 'user_Y6SaVLeH8vY7OmLbE4wf8')\r\n            .then((result) => {\r\n                console.log(result.text);\r\n            }, (error) => {\r\n                console.log(error.text);\r\n            });\r\n    }\r\n\r\n    setWorkplace = (workplace) => {\r\n        this.setState({\r\n            workplace: workplace\r\n        });\r\n\r\n        if (workplace === 'Terrafarm') {\r\n            this.setState({\r\n               value: 0,\r\n               terrafarm: '#EFF3FE',\r\n               terrafarm_text: \"#022140\",\r\n               ku: 'white',\r\n               ku_text: \"#6B6B6B\"\r\n            });\r\n        }\r\n\r\n        if (workplace === 'KU') {\r\n            this.setState({\r\n               value: 100,\r\n               terrafarm: 'white',\r\n               terrafarm_text: \"#6B6B6B\",\r\n               ku: '#EFF3FE',\r\n               ku_text: \"#022140\"\r\n            });\r\n        }\r\n    }\r\n\r\n    loadExperience = (workplace) => {\r\n        if (workplace === \"Terrafarm\") {\r\n            var card = (\r\n                <div class=\"card\" type=\"experience\">\r\n                    <h1 class=\"text5\">Co-Founder & Chief Executive Officer <text style={{ color: \"#188F88\" }}>@ Terrafarm</text></h1>\r\n                    <h2 class=\"text6\">October 2019 - Present</h2>\r\n                    <ul style={{ marginTop: \"0px\" }}>\r\n                        <li class=\"text7\">Led 4 engineering teams and 1 design team from development to launch</li>\r\n                        <li class=\"text7\">Developed an in-home vertical farm OS using C++ and Python that controls farm actuators and accesses database systems in real time</li>\r\n                        <li class=\"text7\">Created a user-web application in React.js, Node.js, and GraphQL that allows customers to record what they plant and harvest and control certain actuators</li>\r\n                        <li class=\"text7\">Constructed real time data pipelines to store thousands of customer and farm data points every day using AWS hosted PostgreSQL and MongoDB instances</li>\r\n                    </ul>\r\n               </div>\r\n            );\r\n        }\r\n\r\n        if (workplace === \"KU\") {\r\n            var card = (\r\n                <div class=\"card\" type=\"experience\">\r\n                    <h1 class=\"text5\">Math Tutor - Applied Statistics <text style={{ color: \"#188F88\" }}>@ The University of Kansas</text></h1>\r\n                    <h2 class=\"text6\">January 2019 - May 2020</h2>\r\n                    <ul style={{ marginTop: \"0px\" }}>\r\n                        <li class=\"text7\">Tutored small groups of up to 5 students in elementary and applied statistics</li>\r\n                        <li class=\"text7\">Guided students through course material, created practice problems, helped students improve their skills in probability, statistical analysis, and regression</li>\r\n                    </ul>\r\n               </div>\r\n            );\r\n        }\r\n\r\n        return card;\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <React.Fragment>\r\n                <PersonalNavbar />\r\n                <Jumbotron className=\"landing\">\r\n                    <div class=\"container1\">\r\n                        <h1 class=\"text1\">FRANK LUSE</h1>\r\n                        <h2 class=\"text2\">\r\n                            Software and data engineer with 1.5 years of experience\r\n                            <br></br>\r\n                            as the lead developer at a fast-paced startup\r\n                            </h2>\r\n                    </div>\r\n                    <Link activeClass=\"active\" to=\"about\" spy={true} smooth={true} offset={-70} duration={1000}>\r\n                        <button class=\"clear\">\r\n                            <a class=\"learn-more\">Learn More</a>\r\n                        </button>\r\n                    </Link>\r\n                </Jumbotron>\r\n                <Jumbotron className=\"about\">\r\n                    <div class=\"main-cards1\">\r\n                        <div class=\"card\" type=\"about\">\r\n                            <h1 class=\"text3\" id=\"about\">\r\n                                About\r\n                            </h1>\r\n                            <h2 class=\"text4\">\r\n                                I'm Frank, a young software engineer and entrepreneur based in Lawrence, KS. I am actively looking for software engineering and data analytics positions and am open to relocation.\r\n                                <br></br>\r\n                                <br></br>\r\n                                I love creating websites, applications, and real-time embedded systems that live on the internet.\r\n                                My mission is to design the best possible experience down to every pixel and user interaction.\r\n                                <br></br>\r\n                                <br></br>\r\n                                During my time at the University of Kansas, I co-founded Terrafarm, a startup specializing in fully autonomous microfarms for homes and restaurants.\r\n                                As Terrafarm's lead software engineer I oversaw product development resulting in getting our web application and indoor farm to market.\r\n                                <br></br>\r\n                                <br></br>\r\n                                Here are some of the technologies I use:\r\n                                <ul style={{ columnCount: \"2\", columnGap: \"0px\", height: \"75px\" }}>\r\n                                    <li>JavaScript</li>\r\n                                    <li>React</li>\r\n                                    <li>Node.js</li>\r\n                                    <li>HTML & CSS</li>\r\n                                    <li>Python</li>\r\n                                    <li>Git</li>\r\n                                </ul>\r\n                            </h2>\r\n                        </div>\r\n                        <div class=\"card\" type=\"about\">\r\n                            <h1 class=\"text3\"></h1>\r\n                        </div>\r\n                        <div class=\"card\" type=\"about\">\r\n                            <div class=\"border\">\r\n                                <div class=\"overlay\" type=\"profile\"><img src={profile} alt=\"profile\" class=\"profile\"/></div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"main-cards2\">\r\n                        <div class=\"card\" type=\"experience\">\r\n                            <h1 class=\"text3\" style={{ marginBottom: \"30px\" }} id=\"experience\">\r\n                                Experience\r\n                            </h1>\r\n                        </div>\r\n                        <div class=\"card\" type=\"experience\">\r\n                            <div class=\"slider-container-home\">\r\n                                <span class=\"bar\"><span class=\"fill\"></span></span>\r\n                                <input type=\"range\" min={0} max={100} value={this.state.value} class=\"slider\" />\r\n                            </div>\r\n                            <div class=\"workplaces\">\r\n                                <ul style={{ marginTop: \"20px\" }}>\r\n                                    <button class=\"workplace\" id=\"Terrafarm\" style={{ background: this.state.terrafarm, color: this.state.terrafarm_text }} onClick={() => this.setWorkplace('Terrafarm')}>Terrafarm</button>\r\n                                    <button class=\"workplace\" id=\"KU\" style={{ background: this.state.ku, color: this.state.ku_text }} onClick={() => this.setWorkplace('KU')}>KU</button>\r\n                                </ul>\r\n                            </div>\r\n                       </div>\r\n                       {this.loadExperience(this.state.workplace)}\r\n\r\n                    </div>\r\n                    <div class=\"main-cards3\">\r\n                        <div class=\"card\" type=\"portfolio\">\r\n                            <h1 class=\"text3\" id=\"portfolio\">\r\n                                Portfolio\r\n                            </h1>\r\n                        </div>\r\n                        <div class=\"card\" type=\"portfolio\">\r\n                            <h1 class=\"text8\" type=\"right\">\r\n                                Featured Work\r\n                            </h1>\r\n                            <h2 class=\"text9\" type=\"right\">\r\n                                Terrafarm Web App\r\n                            </h2>\r\n                            <div class=\"overlay\" type=\"left\"><img src={web_app} alt=\"web_app\" class=\"feature\"></img></div>\r\n                            <div class=\"textbox\" type=\"right\">\r\n                                <h1 class=\"text10\" type=\"right\">\r\n                                A web application that allows customers to monitor and manage their Terrafarm.\r\n                                Users select crops to plant and harvest, the farm's climate and nutrient solution, control LED brightness, and leave valuable feedback.\r\n                                </h1>\r\n                            </div>\r\n                            <h2 class=\"text11\" type=\"right\" style={{ marginTop: \"245px\", textAlign: \"right\" }}>\r\n                                React &emsp; Node.js &emsp; GraphQL &emsp; PostgreSQL\r\n                            </h2>\r\n                            <FontAwesomeIcon icon={faExternalLinkAlt} style={{ color: \"#022140\", marginTop: \"15px\", float: \"right\", cursor: \"pointer\" }}></FontAwesomeIcon>\r\n                        </div>\r\n                        <div class=\"card\" type=\"portfolio\">\r\n                            <h1 class=\"text8\" type=\"left\">\r\n                                Featured Work\r\n                            </h1>\r\n                            <h2 class=\"text9\" type=\"left\">\r\n                                Terrafarm Website\r\n                            </h2>\r\n                            <a href=\"https://terrafarm.us\" style={{ textDecoration: \"none\" }}>\r\n                                <div class=\"overlay\" type=\"right\"><img src={website} alt=\"website\" class=\"feature\"></img></div>\r\n                            </a>\r\n                            <div class=\"textbox\" type=\"left\">\r\n                                <h1 class=\"text10\" type=\"left\">\r\n                                Terrafarm's eCommerce website which contains information about the company and its products.\r\n                                Customers can order the Terrafarm 1 and any supplies they need to grow fresh fruits and vegetables.\r\n                                </h1>\r\n                            </div>\r\n                            <h3 class=\"text11\" type=\"left\" style={{ marginTop: \"245px\", textAlign: \"left\" }}>\r\n                                React &emsp; JavaScript &emsp; HTML & CSS\r\n                            </h3>\r\n                            <a href=\"https://terrafarm.us\" style={{ textDecoration: \"none\" }}>\r\n                                <FontAwesomeIcon icon={faExternalLinkAlt} style={{ color: \"#022140\", marginTop: \"15px\", float: \"left\", cursor: \"pointer\" }}></FontAwesomeIcon>\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n                    <h1 class=\"text3\" style={{ textAlign: \"center\" }} id=\"projects\">\r\n                        Other Projects\r\n                    </h1>\r\n                    <div class=\"main-cards4\">\r\n                        <div class=\"card\" type=\"projects\">\r\n                            <div class=\"project-main\">\r\n                                <a href=\"https://github.com/fluse9/Personal-Website\" style={{ textDecoration: \"none\" }}>\r\n                                    <FontAwesomeIcon icon={faExternalLinkAlt} style={{ color: \"#EFF3FE\", marginTop: \"20px\", marginRight: \"20px\", float: \"right\", cursor: \"pointer\" }}></FontAwesomeIcon>\r\n                                </a>\r\n                                <h1 class=\"text12\">\r\n                                    Personal Website\r\n                                </h1>\r\n                                <h2 class=\"text13\">\r\n                                    First iteration of my portfolio website built with React. I learned a lot about CSS styling, animations, and dynamic layouts.\r\n                                </h2>\r\n                            </div>\r\n                            <h3 class=\"text14\">\r\n                                React &emsp; JS &emsp; HTML &emsp; CSS\r\n                            </h3>\r\n                        </div>\r\n                        <div class=\"card\" type=\"projects\">\r\n                            <div class=\"project-main\">\r\n                                <a href=\"https://github.com/fluse9/Investment-Bot\" style={{ textDecoration: \"none\" }}>\r\n                                    <FontAwesomeIcon icon={faExternalLinkAlt} style={{ color: \"#EFF3FE\", marginTop: \"20px\", marginRight: \"20px\", float: \"right\", cursor: \"pointer\" }}></FontAwesomeIcon>\r\n                                </a>\r\n                                <h1 class=\"text12\">\r\n                                    Investment Bot\r\n                                </h1>\r\n                                <h2 class=\"text13\">\r\n                                    Stock analytics tool that scrapes financial statements and signal data to identify investment opportunities. Uses value, divergence, and triple momentum strategies to trade on Alpaca & Robinhood APIs.\r\n                                </h2>\r\n                            </div>\r\n                            <h3 class=\"text14\">\r\n                                Python &emsp; Pandas &emsp; Numpy\r\n                            </h3>\r\n                        </div>\r\n                        <div class=\"card\" type=\"projects\">\r\n                            <div class=\"project-main\">\r\n                                <a href=\"https://github.com/fluse9/JARVIS\" style={{ textDecoration: \"none\" }}>\r\n                                    <FontAwesomeIcon icon={faExternalLinkAlt} style={{ color: \"#EFF3FE\", marginTop: \"20px\", marginRight: \"20px\", float: \"right\", cursor: \"pointer\" }}></FontAwesomeIcon>\r\n                                </a>\r\n                                <h1 class=\"text12\">\r\n                                    JARVIS\r\n                                </h1>\r\n                                <h2 class=\"text13\">\r\n                                    Personal assistant that uses Natural Language Toolkit and speech recognition to give the current time and weather, search wikipedia, etc. Messaging and calendar functionality coming soon.\r\n                                </h2>\r\n                            </div>\r\n                            <h3 class=\"text14\">\r\n                                Python &emsp; NLTK\r\n                            </h3>\r\n                        </div>\r\n                        <div class=\"card\" type=\"projects\">\r\n                            <div class=\"project-main\">\r\n                                <a href=\"https://github.com/fluse9/Stimulus-Analysis-2020\" style={{ textDecoration: \"none\" }}>\r\n                                    <FontAwesomeIcon icon={faExternalLinkAlt} style={{ color: \"#EFF3FE\", marginTop: \"20px\", marginRight: \"20px\", float: \"right\", cursor: \"pointer\" }}></FontAwesomeIcon>\r\n                                </a>\r\n                                <h1 class=\"text12\">\r\n                                    OECD Stimulus Analysis\r\n                                </h1>\r\n                                <h2 class=\"text13\">\r\n                                    OLS linear regression analysis of stimulus packages across the OECD in 2020. Identified key policies responsible for varying economic performance.\r\n                                </h2>\r\n                            </div>\r\n                            <h3 class=\"text14\">\r\n                                Stata &emsp; Excel\r\n                            </h3>\r\n                        </div>\r\n                        <div class=\"card\" type=\"projects\">\r\n                            <div class=\"project-main\">\r\n                                <a href=\"https://github.com/fluse9/Autofarm-OS\" style={{ textDecoration: \"none\" }}>\r\n                                    <FontAwesomeIcon icon={faExternalLinkAlt} style={{ color: \"#EFF3FE\", marginTop: \"20px\", marginRight: \"20px\", float: \"right\", cursor: \"pointer\" }}></FontAwesomeIcon>\r\n                                </a>\r\n                                <h1 class=\"text12\">\r\n                                    Hydroponics Controller\r\n                                </h1>\r\n                                <h2 class=\"text13\">\r\n                                    Real-time embedded system running on an Arduino Uno that controls pumps, LEDs, and sensors in a DIY hydroponics system.\r\n                                </h2>\r\n                            </div>\r\n                            <h3 class=\"text14\">\r\n                                C++ &emsp; Python &emsp; PostgreSQL\r\n                            </h3>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"main-cards5\">\r\n                        <div class=\"card\" type=\"contact\">\r\n                            <h1 class=\"text3\"  style={{ textAlign: \"center\" }} id=\"contact\">\r\n                                Get In Touch\r\n                            </h1>\r\n                            <div class=\"contact-info\">\r\n                                <h1 class=\"text12\">\r\n                                    Contact Information\r\n                                </h1>\r\n                                <h2 class=\"text13\">\r\n                                    <FontAwesomeIcon icon={faEnvelope} size=\"lg\" style={{ color: \"#EFF3FE\", marginRight: \"20px\", paddingTop: \"2px\", float: \"left\", cursor: \"pointer\" }}></FontAwesomeIcon>\r\n                                    fluse9@gmail.com\r\n                                </h2>\r\n                                <a href=\"https://github.com/fluse9\" style={{ textDecoration: \"none\" }}>\r\n                                    <h2 class=\"text13\">\r\n                                        <img src={GitHub} style={{ width: \"20px\", marginRight: \"20px\", float: \"left\", cursor: \"pointer\" }}></img>\r\n                                        GitHub\r\n                                    </h2>\r\n                                </a>\r\n                                <a href=\"https://www.linkedin.com/in/frank-luse-a05998151/\" style={{ textDecoration: \"none\" }}>\r\n                                    <h2 class=\"text13\">\r\n                                        <img src={LinkedIn} style={{ width: \"20px\", marginRight: \"20px\", float: \"left\", cursor: \"pointer\" }}></img>\r\n                                        LinkedIn\r\n                                    </h2>\r\n                                </a>\r\n                            </div>\r\n                            <form class=\"contact-form\" id=\"contact-form\" onSubmit={this.sendEmail}>\r\n                                <input type=\"hidden\" name=\"contact_number\"/>\r\n                                <input class=\"contact\" type=\"text\" name=\"name\" ref={this.nameElement} placeholder=\"Your name\"/>\r\n                                <input class=\"contact\" type=\"email\" name=\"email\" ref={this.emailElement} placeholder=\"Your email\"/>\r\n                                <textarea class=\"message\" name=\"message\" ref={this.messageElement} placeholder=\"Please type your message here...\"></textarea>\r\n                                <input class=\"send\" type=\"submit\" value=\"Send\"/>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </Jumbotron>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","E:\\Career\\Personal Website\\personal-website\\src\\Pages\\Navbar\\Navbar.js",["84","85","86","87","88","89","90","91","92","93"],"import React from 'react';\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { Navbar, Nav, Jumbotron } from 'react-bootstrap';\r\nimport \"./Navbar.css\";\r\nimport resume from \"../../Assets/docs/resume.pdf\";\r\nimport { Link, Scroll } from 'react-scroll';\r\nimport Modal from 'react-modal';\r\nimport LinkedIn from \"../../Assets/logos/LinkedIn White.svg\";\r\nimport GitHub from \"../../Assets/logos/GitHub White.svg\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faBars } from '@fortawesome/free-solid-svg-icons';\r\n\r\nclass PersonalNavbar extends React.Component {\r\n    state = {\r\n\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    onResumeClick = () => {\r\n        window.open(resume);\r\n    }\r\n\r\n    showModal = () => {\r\n        this.setState({\r\n            show_modal: true\r\n        });\r\n    }\r\n\r\n    hideModal = () => {\r\n        this.setState({\r\n            show_modal: false\r\n        });\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <Navbar class=\"nav\">\r\n                <div class=\"brand-container\">\r\n                    <a class=\"menu\" onClick={() => {this.showModal()}} type=\"nav\" href=\"#\" role=\"button\" id=\"dropdownMenuLink\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                        <FontAwesomeIcon icon={faBars} size=\"lg\" style={{ color: \"white\", marginLeft: \"20px\", marginTop: \"15px\", float: \"left\", cursor: \"pointer\" }}></FontAwesomeIcon>\r\n                    </a>\r\n                    <Modal\r\n                        className=\"modal-backdrop\"\r\n                        isOpen={this.state.show_modal}\r\n                        onClose={() => {this.hideModal()}}\r\n                        transparent={true}\r\n                        animationType={\"slide\"}\r\n                    >\r\n                        <div class=\"modal-main\">\r\n                            <i class=\"fa fa-times fa-lg\" style={{ float: \"right\", marginRight: \"-5vw\", marginTop: \"20px\", color: \"#232323\", cursor: \"pointer\" }} onClick={() => {this.hideModal()}}></i>\r\n                            <ul class=\"modal-list\">\r\n                                <li class=\"modal-item\">\r\n                                    <Link activeClass=\"active\" to=\"about\" spy={true} smooth={true} offset={-70} duration={1000} onClick={() => this.hideModal()}>\r\n                                        ABOUT ME\r\n                                    </Link>\r\n                                </li>\r\n                                <li class=\"modal-item\">\r\n                                    <Link activeClass=\"active\" to=\"experience\" spy={true} smooth={true} offset={-70} duration={1000} onClick={() => this.hideModal()}>\r\n                                        EXPERIENCE\r\n                                    </Link>\r\n                                </li>\r\n                                <li class=\"modal-item\">\r\n                                    <Link activeClass=\"active\" to=\"portfolio\" spy={true} smooth={true} offset={-70} duration={1000} onClick={() => this.hideModal()}>\r\n                                        PORTFOLIO\r\n                                    </Link>\r\n                                </li>\r\n                                <li class=\"modal-item\">\r\n                                    <Link activeClass=\"active\" to=\"projects\" spy={true} smooth={true} offset={-70} duration={1000} onClick={() => this.hideModal()}>\r\n                                        PROJECTS\r\n                                    </Link>\r\n                                </li>\r\n                                <li class=\"modal-item\">\r\n                                    <Link activeClass=\"active\" to=\"contact\" spy={true} smooth={true} offset={-70} duration={1000} onClick={() => this.hideModal()}>\r\n                                        CONTACT\r\n                                    </Link>\r\n                                </li>\r\n                                <li class=\"modal-item\">\r\n                                    <a onClick={this.onResumeClick}>\r\n                                        RESUME\r\n                                    </a>\r\n                                </li>\r\n                            </ul>\r\n                        </div>\r\n                    </Modal>\r\n                    <ul class=\"brand\">\r\n                        <Link style={{ textDecoration: \"none\" }}to=\"/\">\r\n                            <h1 class=\"header1\">FRANK LUSE</h1>\r\n                        </Link>\r\n                    </ul>\r\n                </div>\r\n                <div class=\"nav-item-container\">\r\n                    <ul class=\"nav-list\">\r\n                        <li class=\"nav-item\">\r\n                            <Link activeClass=\"active\" to=\"about\" spy={true} smooth={true} offset={-70} duration={1000}>\r\n                                ABOUT ME\r\n                            </Link>\r\n                        </li>\r\n                        <li class=\"nav-item\">\r\n                            <Link activeClass=\"active\" to=\"experience\" spy={true} smooth={true} offset={-70} duration={1000}>\r\n                                EXPERIENCE\r\n                            </Link>\r\n                        </li>\r\n                        <li class=\"nav-item\">\r\n                            <Link activeClass=\"active\" to=\"portfolio\" spy={true} smooth={true} offset={-70} duration={1000}>\r\n                                PORTFOLIO\r\n                            </Link>\r\n                        </li>\r\n                        <li class=\"nav-item\">\r\n                            <Link activeClass=\"active\" to=\"projects\" spy={true} smooth={true} offset={-70} duration={1000}>\r\n                                PROJECTS\r\n                            </Link>\r\n                        </li>\r\n                        <li class=\"nav-item\">\r\n                            <Link activeClass=\"active\" to=\"contact\" spy={true} smooth={true} offset={-70} duration={1000}>\r\n                                CONTACT\r\n                            </Link>\r\n                        </li>\r\n                        <li class=\"nav-item\">\r\n                            <a onClick={this.onResumeClick}>\r\n                                RESUME\r\n                            </a>\r\n                        </li>\r\n                    </ul>\r\n                    <div class=\"social-container\">\r\n                        <li class=\"social-item\">\r\n                            <a href=\"https://www.linkedin.com/in/frank-luse-a05998151/\" style={{ textDecoration: \"none\" }}>\r\n                                <img src={LinkedIn} style={{ width: \"20px\", marginRight: \"20px\", float: \"left\", cursor: \"pointer\" }}></img>\r\n                            </a>\r\n                        </li>\r\n                        <li class=\"social-item\">\r\n                            <a href=\"https://github.com/fluse9\" style={{ textDecoration: \"none\" }}>\r\n                                <img src={GitHub} style={{ width: \"20px\", marginRight: \"20px\", float: \"left\", cursor: \"pointer\" }}></img>\r\n                            </a>\r\n                        </li>\r\n                    </div>\r\n                </div>\r\n            </Navbar>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PersonalNavbar;","E:\\Career\\Personal Website\\personal-website\\src\\Pages\\MyAccount\\Notifications.js",["94","95","96","97","98","99","100","101","102","103","104","105","106","107"],"import React from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\"\r\nimport { Navbar, Nav, Jumbotron } from 'react-bootstrap';\r\nimport \"./Notifications.css\"\r\nimport $ from 'jquery'\r\nimport { Dropdown, DropdownButton, MenuItem } from 'react-bootstrap';\r\nimport 'bootstrap/dist/js/bootstrap.bundle';\r\nimport DashboardNavbars from \"../../Pages/MyAccount/DashboardNavbars.js\"\r\n\r\nclass Notification extends React.Component {\r\n    state = {\r\n        notification_list: []\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchNotifications();\r\n    }\r\n\r\n    fetchNotifications() {\r\n        const customer_id = this.context.customer_id;\r\n        const requestBody = {\r\n            query: `\r\n                query {\r\n                  notifications(customer_id: \"${customer_id}\") {\r\n                    notification_id\r\n                    notification_type\r\n                    notification_message\r\n                  }\r\n                }\r\n            `\r\n        };\r\n\r\n        fetch('http://localhost:8000/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n            .then(res => {\r\n                if (res.status != 200) {\r\n                    throw new Error('Failed.');\r\n                }\r\n                return res.json();\r\n            })\r\n            .then(resData => {\r\n                this.setState({\r\n                    notification_list: resData.data.notifications\r\n                });\r\n                this.state.notification_list = resData.data.notifications;\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n    }\r\n\r\n    deleteNotification = (index) => {\r\n        const customer_id = this.context.customer_id;\r\n        const token = this.context.token;\r\n        const notification_id = this.state.notification_list[index].notification_id;\r\n        const requestBody = {\r\n            query: `\r\n                mutation {\r\n                  deleteNotification(customer_id: \"${customer_id}\", notification_id: \"${notification_id}\") {\r\n                    notification_id\r\n                    notification_type\r\n                    notification_message\r\n                  }\r\n                }\r\n            `\r\n        };\r\n\r\n        fetch('http://localhost:8000/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: 'bearer ' + token\r\n            }\r\n        })\r\n            .then(res => {\r\n                if (res.status != 200) {\r\n                    throw new Error('Failed.');\r\n                }\r\n                return res.json();\r\n            })\r\n            .then(resData => {\r\n                this.fetchNotifications();\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n    }\r\n\r\n    loadNotifications = () => {\r\n        var i;\r\n        var notifications = [];\r\n        for (i = 0; i < this.state.notification_list.length; i++) {\r\n            var color;\r\n            if (this.state.notification_list[i].notification_type === \"info\") {\r\n                color = \"black\"\r\n            }\r\n            else if (this.state.notification_list[i].notification_type === \"success\" || this.state.notification_list[i].notification_type === \"warning\") {\r\n                color = \"white\"\r\n            }\r\n            const index = i;\r\n            notifications[i] = (\r\n                <div class=\"notification\" type={this.state.notification_list[i].notification_type}>\r\n                    <h1 class=\"notification-text\" type={color}>{this.state.notification_list[i].notification_message}\r\n                        <button class=\"notification-close\">\r\n                            <i class=\"fa fa-times icon fa-s\" style={{ color: {color} }} onClick={() => {this.deleteNotification(index)}}></i>\r\n                        </button>\r\n                    </h1>\r\n                </div>\r\n            );\r\n        }\r\n        return notifications;\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <html>\r\n                <head>\r\n                </head>\r\n                <body class=\"notification-body\">\r\n                    <div class=\"grid-container\">\r\n                        <DashboardNavbars />\r\n                        <main class=\"main\" type=\"notifications\">\r\n                            <div class=\"main-cards\" type=\"notifications\">\r\n                                <div class=\"card\" type=\"notifications\">\r\n                                    <h1>NOTIFICATIONS</h1>\r\n                                    {this.loadNotifications()}\r\n                                </div>\r\n                            </div>\r\n                        </main>\r\n                    </div>\r\n                </body>\r\n            </html>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Notification;","E:\\Career\\Personal Website\\personal-website\\src\\Pages\\MyAccount\\Dashboard.js",["108","109","110","111","112","113","114","115","116","117","118","119"],"import React from 'react';\r\nimport \"./Dashboard.css\"\r\nimport $ from 'jquery'\r\nimport 'bootstrap/dist/js/bootstrap.bundle';\r\nimport DashboardNavbars from \"../../Pages/MyAccount/DashboardNavbars.js\";\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nclass Dashboard extends React.Component {\r\n    state = {\r\n        next_harvest: null,\r\n        next_harvest_indicator: null,\r\n        water_low: null,\r\n        water_low_indicator: null,\r\n        led_level: null,\r\n        led_level_indicator: null,\r\n        nutrient_low: null,\r\n        ph_low: null,\r\n        harvest_list: [],\r\n        crop_list: [],\r\n        terrafarm_cost: 0,\r\n        conventional_cost: 0,\r\n        terrafarm_water: 0,\r\n        conventional_water: 0,\r\n        terrafarm_nutrient: 0,\r\n        conventional_nutrient: 0,\r\n        redirect: false,\r\n        loading: true\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchTerrafarms();\r\n        this.fetchHarvests();\r\n        this.fetchCrops();\r\n        this.fetchCustomer();\r\n    }\r\n\r\n    setNextHarvest = (terrafarm_list) => {\r\n        var next_harvest = terrafarm_list[0].trays_list[0].exp_harvest_timestamp_list[0];\r\n        var i;\r\n        for (i = 0; i < terrafarm_list.length; i++) {\r\n            var j;\r\n            for (j = 0; j < terrafarm_list[i].trays_list.length; j++) {\r\n                var k;\r\n                for (k = 0; k < terrafarm_list[i].trays_list[j].exp_harvest_timestamp_list.length; k++) {\r\n                    var this_harvest = terrafarm_list[i].trays_list[j].exp_harvest_timestamp_list[k];\r\n                    if ((this_harvest < next_harvest && this_harvest != 0) || Number(next_harvest) === 0) {\r\n                        next_harvest = this_harvest;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        var next_harvest_indicator;\r\n        if ((new Date(next_harvest / 1) - new Date()) / 86400000 < 2) {\r\n            next_harvest_indicator = true;\r\n        }\r\n        else {\r\n            next_harvest_indicator = false;\r\n        }\r\n\r\n        next_harvest = new Date(next_harvest / 1).toDateString().split(' ')[1] + ' ' + new Date(next_harvest / 1).toDateString().split(' ')[2]\r\n        this.setState({\r\n            next_harvest: next_harvest,\r\n            next_harvest_indicator: next_harvest_indicator\r\n        });\r\n    }\r\n\r\n    setWaterLevel = (terrafarm_list) => {\r\n        var water_level;\r\n        var water_level_indicator = false;\r\n        var i;\r\n        for (i = 0; i < terrafarm_list.length; i++) {\r\n            if (terrafarm_list[i].tank0_low === 0) {\r\n                water_level_indicator = true;\r\n            }\r\n        }\r\n        if (water_level_indicator === true) {\r\n            water_level = \"Low\";\r\n        }\r\n        else {\r\n            water_level = \"Normal\";\r\n        }\r\n        this.setState({\r\n            water_low: water_level,\r\n            water_low_indicator: water_level_indicator\r\n        });\r\n    }\r\n\r\n    setLedLevel = (terrafarm_list) => {\r\n        var led_level;\r\n        var led_level_indicator = false;\r\n        var i;\r\n        for (i = 0; i < terrafarm_list.length; i++) {\r\n            if (terrafarm_list[i].led_brightness === 100) {\r\n                led_level_indicator = true;\r\n                led_level = 'Optimal';\r\n            }\r\n            else if(terrafarm_list[i].led_brightness > 0 && terrafarm_list[i].led_brightness < 100) {\r\n                led_level_indicator = true;\r\n                led_level = 'Low';\r\n            }\r\n        }\r\n        if (led_level_indicator === false) {\r\n            led_level = \"Off\";\r\n        }\r\n        this.setState({\r\n           led_level: led_level,\r\n           led_level_indicator: led_level_indicator\r\n        });\r\n    }\r\n\r\n    setNutrientLevel = (terrafarm_list) => {\r\n        var nutrient_level;\r\n        var nutrient_level_indicator = false;\r\n        var i;\r\n        for (i = 0; i < terrafarm_list.length; i++) {\r\n            if (terrafarm_list[i].tank1_low === 0) {\r\n                nutrient_level_indicator = true;\r\n            }\r\n        }\r\n        if (nutrient_level_indicator === true) {\r\n            nutrient_level = true;\r\n        }\r\n        else {\r\n            nutrient_level = false;\r\n        }\r\n        this.setState({\r\n           nutrient_low: nutrient_level\r\n        });\r\n    }\r\n\r\n    setPhLevel = (terrafarm_list) => {\r\n        var ph_level;\r\n        var ph_level_indicator = false;\r\n        var i;\r\n        for (i = 0; i < terrafarm_list.length; i++) {\r\n            if (terrafarm_list[i].tank2_low === 0) {\r\n                ph_level_indicator = true;\r\n            }\r\n        }\r\n        if (ph_level_indicator === true) {\r\n            ph_level = true;\r\n        }\r\n        else {\r\n            ph_level = false;\r\n        }\r\n        this.setState({\r\n           ph_low: ph_level\r\n        });\r\n    }\r\n\r\n    loadConventionalData = () => {\r\n        var conventional_cost = 0;\r\n        var conventional_water = 0;\r\n        var conventional_nutrient = 0;\r\n        var i;\r\n        for (i = 0; i < this.state.harvest_list.length; i++) {\r\n            var j;\r\n            for (j = 0; j < this.state.crop_list.length; j++) {\r\n                if (this.state.harvest_list[i].plant_id === this.state.crop_list[j].plant_name) {\r\n                    conventional_cost += this.state.crop_list[j].market_price * this.state.harvest_list[i].weight;\r\n                    conventional_water += this.state.crop_list[j].water_use;\r\n                    conventional_nutrient += this.state.crop_list[j].nutrient_use;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            conventional_cost: conventional_cost,\r\n            conventional_water: conventional_water,\r\n            conventional_nutrient: conventional_nutrient\r\n        });\r\n    }\r\n\r\n    setStatusList = (status_list, terrafarm_list) => {\r\n        var i;\r\n        var water_use = 0;\r\n        var nutrient_use = 0;\r\n        for (i = 0; i < status_list.length; i++) {\r\n            if (status_list[i]) {\r\n                water_use += status_list[i].water_use;\r\n                nutrient_use += status_list[i].nutrient_use * 0.00220462;\r\n            }\r\n        }\r\n        var j;\r\n        var slots = 0;\r\n        for (j = 0; j < terrafarm_list.length; j++) {\r\n            var k;\r\n            for (k = 0; k < terrafarm_list[j].trays_list.length; k++) {\r\n                slots += terrafarm_list[j].trays_list[k].exp_harvest_timestamp_list.length;\r\n            }\r\n        }\r\n        this.setState({\r\n            terrafarm_water: water_use,\r\n            terrafarm_nutrient: nutrient_use / slots,\r\n            loading: false\r\n        });\r\n    }\r\n\r\n    fetchTerrafarms() {\r\n        const customer_id = this.context.customer_id\r\n        const requestBody = {\r\n            query: `\r\n                    query {\r\n                      terrafarms(customer_id: \"${customer_id}\") {\r\n                        _id\r\n                        led_brightness\r\n                        tank0_low\r\n                        tank1_low\r\n                        tank2_low\r\n                        num_trays\r\n                        trays_list {\r\n                          exp_harvest_timestamp_list\r\n                        }\r\n                      }\r\n                    }\r\n                `\r\n        };\r\n\r\n        fetch('http://localhost:8000/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n            .then(res => {\r\n                if (res.status != 200) {\r\n                    throw new Error('Failed.');\r\n                }\r\n                return res.json();\r\n            })\r\n            .then(resData => {\r\n                this.setNextHarvest(resData.data.terrafarms);\r\n                this.setWaterLevel(resData.data.terrafarms);\r\n                this.setLedLevel(resData.data.terrafarms);\r\n                this.setNutrientLevel(resData.data.terrafarms);\r\n                this.setPhLevel(resData.data.terrafarms);\r\n                this.fetchStatus(resData.data.terrafarms);\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n    }\r\n\r\n    fetchHarvests() {\r\n        const customer_id = this.context.customer_id;\r\n        const token = this.context.token;\r\n\r\n        const requestBody = {\r\n            query: `\r\n                query {\r\n                  harvests (customer_id: \"${customer_id}\") {\r\n                    _id\r\n                    weight\r\n                    plant_id\r\n                    act_harvest_timestamp\r\n                  }\r\n                }\r\n            `\r\n        };\r\n\r\n        fetch('http://localhost:8000/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: 'bearer ' + token\r\n            }\r\n        })\r\n            .then(res => {\r\n                if (res.status != 200) {\r\n                    throw new Error('Failed.');\r\n                }\r\n                return res.json();\r\n            })\r\n            .then(resData => {\r\n                this.setState({\r\n                    harvest_list: resData.data.harvests\r\n                });\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n    }\r\n\r\n    fetchCrops() {\r\n        const requestBody = {\r\n            query: `\r\n                query {\r\n                  plants {\r\n                    plant_id\r\n                    plant_name\r\n                    water_use\r\n                    nutrient_use\r\n                    market_price\r\n                  }\r\n                }\r\n            `\r\n        };\r\n\r\n        fetch('http://localhost:8000/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n            .then(res => {\r\n                if (res.status != 200) {\r\n                    throw new Error('Failed.');\r\n                }\r\n                return res.json();\r\n            })\r\n            .then(resData => {\r\n                this.setState({\r\n                    crop_list: resData.data.plants\r\n                });\r\n                this.loadConventionalData();\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n    }\r\n\r\n    fetchCustomer() {\r\n        const customer_id = this.context.customer_id;\r\n        const token = this.context.token;\r\n\r\n        const requestBody = {\r\n            query: `\r\n                query {\r\n                  customer (customer_id: \"${customer_id}\") {\r\n                    total_purchases\r\n                  }\r\n                }\r\n            `\r\n        };\r\n\r\n        fetch('http://localhost:8000/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: 'bearer ' + token\r\n            }\r\n        })\r\n            .then(res => {\r\n                if (res.status != 200) {\r\n                    throw new Error('Failed.');\r\n                }\r\n                return res.json();\r\n            })\r\n            .then(resData => {\r\n                this.setState({\r\n                    terrafarm_cost: resData.data.customer.total_purchases\r\n                });\r\n                console.log(this.state.terrafarm_water)\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n    }\r\n\r\n    fetchStatus = (terrafarm_list) => {\r\n        const customer_id = this.context.customer_id;\r\n        const token = this.context.token;\r\n        var i;\r\n        var status_list = [];\r\n        for (i = 0; i < terrafarm_list.length; i++) {\r\n            const requestBody = {\r\n                query: `\r\n                    query {\r\n                      status (unit_id: \"${terrafarm_list[i]._id}\") {\r\n                        status\r\n                      }\r\n                    }\r\n                `\r\n            };\r\n\r\n            fetch('http://localhost:8000/graphql', {\r\n                method: 'POST',\r\n                body: JSON.stringify(requestBody),\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: 'bearer ' + token\r\n                }\r\n            })\r\n                .then(res => {\r\n                    if (res.status != 200) {\r\n                        throw new Error('Failed.');\r\n                    }\r\n                    return res.json();\r\n                })\r\n                .then(resData => {\r\n                    if (resData) {\r\n                        var j;\r\n                        for (j = 0; j < resData.data.status.length; j++) {\r\n                            if (resData.data.status[j]) {\r\n                                status_list.push(resData.data.status[j].status);\r\n                            }\r\n                        }\r\n                    }\r\n                    if (i === terrafarm_list.length) {\r\n                        this.setStatusList(status_list, terrafarm_list);\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                });\r\n        }\r\n    }\r\n\r\n    renderRedirect = () => {\r\n        if (this.state.redirect === true) {\r\n          return <Redirect to='/dashboard/status' />\r\n        }\r\n    }\r\n\r\n    renderSupplyAlert() {\r\n        var current_date = new Date();\r\n        var next_week = new Date(current_date.setDate(current_date.getDate() + 7))\r\n        const nutrient_alert = (\r\n            <div class=\"card\" type=\"dashboard\">\r\n                <div class=\"alert\">\r\n                    <h1><i class=\"fa fa-exclamation-triangle icon\" style={{ color: \"white\" }}></i> NUTRIENT SUPPLY LOW</h1>\r\n                </div>\r\n                <div class=\"line\">\r\n                    <div class=\"circle\"></div>\r\n                </div>\r\n                <h2>Looks like you're running low on nutrients! Set up a new order for restock by {next_week.toDateString()}.</h2>\r\n                <button class=\"button\" type=\"purchase\">PURCHASE NOW {\">\"}</button>\r\n            </div>\r\n        );\r\n\r\n        const ph_alert = (\r\n            <div class=\"card\" type=\"dashboard\">\r\n                <div class=\"alert\">\r\n                    <h1><i class=\"fa fa-exclamation-triangle icon\" style={{ color: \"white\" }}></i> PH DOWN SUPPLY LOW</h1>\r\n                </div>\r\n                <div class=\"line\">\r\n                    <div class=\"circle\"></div>\r\n                </div>\r\n                <h2>Looks like you're running low on pH down solution! Set up a new order for restock by {next_week.toDateString()}.</h2>\r\n                <button class=\"button\" type=\"purchase\">PURCHASE NOW {\">\"}</button>\r\n            </div>\r\n        );\r\n\r\n        if (this.state.nutrient_low === true) {\r\n            return nutrient_alert;\r\n        }\r\n\r\n        else if (this.state.ph_low === true) {\r\n            return ph_alert;\r\n        }\r\n\r\n        else {\r\n            return (<div class=\"card\" type=\"dashboard\"></div>);\r\n        }\r\n    }\r\n\r\n    renderCostSavings() {\r\n        if (this.state && this.state.terrafarm_water != 0) {\r\n            return (\r\n                <React.Fragment>\r\n                    <h3>COST SAVINGS</h3>\r\n                    <h4>You have saved ${this.state.conventional_cost - this.state.terrafarm_cost} on produce grown in your Terrafarm versus purchasing at the store.</h4>\r\n                    <div class=\"wrap\">\r\n                        <div class=\"holder\">\r\n                            <div class=\"bar-axis\"></div>\r\n                            <div class=\"bargraph cf\" data={this.state.conventional_cost} data-percent={((this.state.conventional_cost) / (this.state.terrafarm_cost + this.state.conventional_cost) * 100).toString() + \"%\"} onLoad={setTimeout(0)} style={{ backgroundColor: '#368051' }}>\r\n                                <span class=\"label\"></span>\r\n                                <span class=\"count\" id=\"cost1\"></span>\r\n                            </div>\r\n                            <span class=\"label-actual\">CONVENTIONAL FARMING</span>\r\n                            <div class=\"bargraph cf\" data={this.state.terrafarm_cost} data-percent={((this.state.terrafarm_cost) / (this.state.terrafarm_cost + this.state.conventional_cost) * 100).toString() + \"%\"} onLoad={setTimeout(0)} style={{ backgroundColor: '#48AC6D' }}>\r\n                                <span class=\"label light\"></span>\r\n                                <span class=\"count\" id=\"cost2\"></span>\r\n                            </div>\r\n                            <span class=\"label-actual\">TERRAFARM</span>\r\n                        </div>\r\n                    </div>\r\n                </React.Fragment>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderWaterSavings() {\r\n        if (this.state && this.state.terrafarm_water != 0) {\r\n            return (\r\n                <React.Fragment>\r\n                    <h3>WATER SAVINGS</h3>\r\n                    <h4>Produce grown in your Terrafarm has used {Math.round(100 * (this.state.conventional_water - this.state.terrafarm_water) / this.state.conventional_water)}% less water than conventional farms.</h4>\r\n                    <div class=\"wrap\">\r\n                        <div class=\"holder\">\r\n                            <div class=\"bar-axis\"></div>\r\n                            <div class=\"bargraph cf\" data={this.state.conventional_water} data-percent={((this.state.conventional_water) / (this.state.terrafarm_water + this.state.conventional_water) * 100).toString() + \"%\"} onLoad={setTimeout(0)} style={{ backgroundColor: '#0A636B' }}>\r\n                                <span class=\"label\"> </span>\r\n                                <span class=\"count\" id=\"water1\"></span>\r\n                            </div>\r\n                            <span class=\"label-actual\">CONVENTIONAL FARMING</span>\r\n                            <div class=\"bargraph cf\" data={this.state.terrafarm_water} data-percent={((this.state.terrafarm_water) / (this.state.terrafarm_water + this.state.conventional_water) * 100).toString() + \"%\"} onLoad={setTimeout(0)} style={{ backgroundColor: '#0C808B' }}>\r\n                                <span class=\"label light\"></span>\r\n                                <span class=\"count\" id=\"water2\"></span>\r\n                            </div>\r\n                            <span class=\"label-actual\">TERRAFARM</span>\r\n                        </div>\r\n                    </div>\r\n                </React.Fragment>\r\n            );\r\n        }\r\n    }\r\n\r\n\r\n    renderNutrientSavings() {\r\n        if (this.state && this.state.terrafarm_water != 0) {\r\n            return (\r\n                <React.Fragment>\r\n                    <h3>NUTRIENT SAVINGS</h3>\r\n                    <h4>Produce grown in your Terrafarm has used {Math.round(100 * (this.state.conventional_nutrient - this.state.terrafarm_nutrient) / this.state.conventional_nutrient)}% less fertilizer than conventional farms.</h4>\r\n                    <div class=\"wrap\">\r\n                        <div class=\"holder\">\r\n                            <div class=\"bar-axis\"></div>\r\n                            <div class=\"bargraph cf \" data={this.state.conventional_nutrient * 453.592} data-percent={((this.state.conventional_nutrient) / (this.state.terrafarm_nutrient + this.state.conventional_nutrient) * 100).toString() + \"%\"} onLoad={setTimeout(0)} style={{ backgroundColor: '#368569' }}>\r\n                                <span class=\"label\"></span>\r\n                                <span class=\"count\" id=\"nutrient1\"></span>\r\n                            </div>\r\n                            <span class=\"label-actual\">CONVENTIONAL FARMING</span>\r\n                            <div class=\"bargraph cf\" data={this.state.terrafarm_nutrient * 453.592} data-percent={((this.state.terrafarm_nutrient) / (this.state.terrafarm_nutrient + this.state.conventional_nutrient) * 100).toString() + \"%\"} onLoad={setTimeout(0)} style={{ backgroundColor: '#48B08C' }}>\r\n                                <span class=\"label light\"></span>\r\n                                <span class=\"count\" id=\"nutrient2\"></span>\r\n                            </div>\r\n                            <span class=\"label-actual\">TERRAFARM</span>\r\n                        </div>\r\n                    </div>\r\n                </React.Fragment>\r\n            );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            setTimeout(function start() {\r\n                $('.bargraph').each(function (i) {\r\n                    var $bargraph = $(this);\r\n                    $(this).append('<span class=\"count\"></span>')\r\n                    setTimeout(function () {\r\n                        $bargraph.css('width', $bargraph.attr('data-percent'));\r\n                    }, i * 100);\r\n                });\r\n                $('#cost1').each(function () {\r\n                    $(this).prop('Counter', 0).animate({\r\n                        Counter: $(this).parent('.bargraph').attr('data')\r\n                    }, {\r\n                        duration: 2000,\r\n                        easing: 'swing',\r\n                        step: function (now) {\r\n                            $(this).text('$' + Math.ceil(now));\r\n                        }\r\n                    });\r\n                });\r\n                $('#cost2').each(function () {\r\n                    $(this).prop('Counter', 0).animate({\r\n                        Counter: $(this).parent('.bargraph').attr('data')\r\n                    }, {\r\n                        duration: 2000,\r\n                        easing: 'swing',\r\n                        step: function (now) {\r\n                            $(this).text('$' + Math.ceil(now));\r\n                        }\r\n                    });\r\n                });\r\n                $('#water1').each(function () {\r\n                    $(this).prop('Counter', 0).animate({\r\n                        Counter: $(this).parent('.bargraph').attr('data')\r\n                    }, {\r\n                        duration: 2000,\r\n                        easing: 'swing',\r\n                        step: function (now) {\r\n                            $(this).text(Math.ceil(now) + 'gal');\r\n                        }\r\n                    });\r\n                });\r\n                $('#water2').each(function () {\r\n                    $(this).prop('Counter', 0).animate({\r\n                        Counter: $(this).parent('.bargraph').attr('data')\r\n                    }, {\r\n                        duration: 2000,\r\n                        easing: 'swing',\r\n                        step: function (now) {\r\n                            $(this).text(Math.ceil(now) + 'gal');\r\n                        }\r\n                    });\r\n                });\r\n                $('#nutrient1').each(function () {\r\n                    $(this).prop('Counter', 0).animate({\r\n                        Counter: $(this).parent('.bargraph').attr('data')\r\n                    }, {\r\n                        duration: 2000,\r\n                        easing: 'swing',\r\n                        step: function (now) {\r\n                            $(this).text(Math.ceil(now) + 'g');\r\n                        }\r\n                    });\r\n                });\r\n                $('#nutrient2').each(function () {\r\n                    $(this).prop('Counter', 0).animate({\r\n                        Counter: $(this).parent('.bargraph').attr('data')\r\n                    }, {\r\n                        duration: 2000,\r\n                        easing: 'swing',\r\n                        step: function (now) {\r\n                            $(this).text(Math.ceil(now) + 'g');\r\n                        }\r\n                    });\r\n                });\r\n            }, 500),\r\n            <React.Fragment>\r\n                {this.renderRedirect()}\r\n                <head>\r\n                    <script type=\"text/javascript\" src=\"//code.jquery.com/jquery-3.5.1.js\"></script>\r\n                </head>\r\n                <body class=\"dash-body\">\r\n                    <div class=\"grid-container\">\r\n                        <DashboardNavbars />\r\n                        <main class=\"main\" type=\"dashboard\">\r\n                            <div class=\"main-cards\" type=\"dashboard\">\r\n                                <div class=\"card\" type=\"dashboard\"></div>\r\n                                <div class=\"card\" type=\"dashboard\">\r\n                                    <h3>MY TERRAFARM</h3>\r\n                                    <h4>A brief overview of your Terrafarm's current status.</h4>\r\n                                    <h5>Water Level\r\n                                        <div style={{ position: \"absolute\", marginLeft: \"300px\", marginTop: \"-60px\" }}><input class=\"toggle-button\" type=\"checkbox\" id=\"toggle-button1\" onClick={() => {this.setState({redirect: true})}} checked={this.state.water_low_indicator}/><label class=\"dashboard-label\" for=\"toggle-button1\" type=\"water\" water_low={this.state.water_low}></label></div>\r\n                                    </h5>\r\n                                    <h5>Next Harvest\r\n                                        <div style={{ position: \"absolute\", marginLeft: \"300px\", marginTop: \"-60px\" }}><input class=\"toggle-button\" type=\"checkbox\" id=\"toggle-button2\" onClick={() => {this.setState({redirect: true})}} checked={this.state.next_harvest_indicator}/><label class=\"dashboard-label\" for=\"toggle-button2\" type=\"harvest\" next_harvest={this.state.next_harvest}></label></div>\r\n                                    </h5>\r\n                                    <h5>Lighting\r\n                                        <div style={{ position: \"absolute\", marginLeft: \"300px\", marginTop: \"-60px\" }}><input class=\"toggle-button\" type=\"checkbox\" id=\"toggle-button3\" onClick={() => {this.setState({redirect: true})}} checked={this.state.led_level_indicator}/><label class=\"dashboard-label\" for=\"toggle-button3\" type=\"lighting\" led_level={this.state.led_level}></label></div>\r\n                                    </h5>\r\n                                </div>\r\n                                {this.renderSupplyAlert()}\r\n                                <div class=\"card\" type=\"dashboard\">\r\n                                    {this.renderCostSavings()}\r\n                                </div>\r\n                                <div class=\"card\" type=\"dashboard\">\r\n                                    {this.renderWaterSavings()}\r\n                                </div>\r\n                                <div class=\"card\" type=\"dashboard\">\r\n                                    {this.renderNutrientSavings()}\r\n                                </div>\r\n                            </div>\r\n                        </main>\r\n                    </div>\r\n                </body>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Dashboard;","E:\\Career\\Personal Website\\personal-website\\src\\Pages\\MyAccount\\Status.js",["120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159"],"import React from 'react';\r\nimport \"./Status.css\"\r\nimport 'bootstrap/dist/js/bootstrap.bundle';\r\nimport DashboardNavbars from \"../../Pages/MyAccount/DashboardNavbars.js\"\r\nimport Tray from \"../../Pages/Trays/Tray.js\"\r\nimport SliderAlt from \"../../Pages/Slider/SliderAlt.js\";\r\nimport $ from 'jquery';\r\n\r\nclass Status extends React.Component {\r\n    state = {\r\n        terrafarm_list: [],\r\n        current_terrafarm: 0,\r\n        tray_list: [],\r\n        current_tray: 0,\r\n        tray_data: {},\r\n        climate_id: \"\",\r\n        nutrient_id: \"\",\r\n        climate_list: [],\r\n        nutrient_list: [],\r\n        low_light_mode: false,\r\n        led_brightness: 0\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.lowLightModeElement = React.createRef();\r\n        this.ledBrightnessElement = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchTerrafarms();\r\n        this.fetchClimates();\r\n        this.fetchNutrients();\r\n    }\r\n\r\n    setTerrafarm(terrafarms) {\r\n        this.setState({\r\n            terrafarm_list: terrafarms,\r\n            current_terrafarm: 0,\r\n            _id: terrafarms[0]._id,\r\n            current_tray: 0,\r\n            climate_id: terrafarms[0].climate_id,\r\n            nutrient_id: terrafarms[0].nutrient_id,\r\n            led_brightness: terrafarms[0].led_brightness,\r\n            low_light_mode: terrafarms[0].low_light_mode\r\n        });\r\n        this.fetchTray();\r\n    }\r\n\r\n    selectTerrafarm(terrafarm, index) {\r\n        this.setState({\r\n            current_terrafarm: index,\r\n            _id: terrafarm._id,\r\n            climate_id: terrafarm.climate_id,\r\n            nutrient_id: terrafarm.nutrient_id,\r\n            led_brightness: terrafarm.led_brightness,\r\n            low_light_mode: terrafarm.low_light_mode\r\n        });\r\n        this.state.current_terrafarm = index;\r\n        this.state._id = terrafarm._id;\r\n        this.fetchTray();\r\n    }\r\n\r\n    selectTray(tray, index) {\r\n        this.setState({\r\n            current_tray: index\r\n        });\r\n        this.state.current_tray = index;\r\n        this.fetchTray();\r\n    }\r\n\r\n    selectClimate(index) {\r\n        this.setState({\r\n            climate_id: this.state.climate_list[index].climate_id\r\n        });\r\n        this.setClimate();\r\n    }\r\n\r\n    selectNutrient(index) {\r\n        this.setState({\r\n            nutrient_id: this.state.nutrient_list[index].nutrient_id\r\n        });\r\n        this.setNutrient();\r\n    }\r\n\r\n    loadTerrafarmList = () => {\r\n        const terrafarm_list = [];\r\n        var i;\r\n        for (i = 0; i < this.state.terrafarm_list.length; i++) {\r\n            if (this.state.terrafarm_list[i].unit_name === this.state.terrafarm_list[this.state.current_terrafarm].unit_name) {\r\n                terrafarm_list[i] = <li class=\"dropdown-item\" type=\"status\" style={{ background: \"transparent\" }}><a href=\"javascript:;\" id=\"current_terrafarm\">{this.state.terrafarm_list[this.state.current_terrafarm].unit_name} <i class=\"fa fa-check icon\" id=\"terrafarm_check\" style={{ float: \"right\", marginRight: \"30px\", color: \"white\" }}></i></a></li>;\r\n            }\r\n            if (this.state.terrafarm_list[i].unit_name != this.state.terrafarm_list[this.state.current_terrafarm].unit_name) {\r\n                const terrafarm = this.state.terrafarm_list[i];\r\n                const index = i;\r\n                terrafarm_list[i] = <li class=\"dropdown-item\" type=\"status\" style={{ background: \"transparent\" }}><a onClick={() => { this.selectTerrafarm(terrafarm, index) }} href=\"javascript:;\">{this.state.terrafarm_list[i].unit_name}</a></li>;\r\n            }\r\n        }\r\n        return terrafarm_list;\r\n    }\r\n\r\n    loadTrayList = () => {\r\n        const tray_list = [];\r\n        var i;\r\n        for (i = 0; i < this.state.terrafarm_list.length; i++) {\r\n            if (this.state.terrafarm_list[this.state.current_terrafarm].trays_list[i].tray_name === this.state.terrafarm_list[this.state.current_terrafarm].trays_list[this.state.current_tray].tray_name) {\r\n                tray_list[i] = <li class=\"dropdown-item\" type=\"status\" style={{ background: \"transparent\" }}><a href=\"javascript:;\" id=\"current_tray\">{this.state.terrafarm_list[this.state.current_terrafarm].trays_list[this.state.current_tray].tray_name} <i class=\"fa fa-check icon\" id=\"tray_check\" style={{ float: \"right\", marginRight: \"30px\", color: \"white\" }}></i></a></li>;\r\n            }\r\n            else if (this.state.terrafarm_list[this.state.current_terrafarm].trays_list[i].tray_name != this.state.terrafarm_list[this.state.current_terrafarm].trays_list[this.state.current_tray].tray_name) {\r\n                const tray = this.state.terrafarm_list[this.state.current_terrafarm].trays_list[i];\r\n                const index = i;\r\n                tray_list[i] = <li class=\"dropdown-item\" type=\"status\" style={{ background: \"transparent\" }}><a onClick={() => { this.selectTray(tray, index) }} href=\"javascript:;\">{this.state.terrafarm_list[this.state.current_terrafarm].trays_list[i].tray_name}</a></li>;\r\n            }\r\n        }\r\n        return tray_list;\r\n    }\r\n\r\n    loadClimateList = () => {\r\n        const climate_list = [];\r\n        var i;\r\n        for (i = 0; i < this.state.climate_list.length; i++) {\r\n            if (this.state.climate_list[i].climate_id === this.state.climate_id) {\r\n                climate_list[i] = <li class=\"dropdown-item\" type=\"status\" style={{ background: \"transparent\" }}><a href=\"javascript:;\" id=\"current_tray\">{this.state.climate_list[i].climate_name} <i class=\"fa fa-check icon\" id=\"tray_check\" style={{ float: \"right\", marginRight: \"30px\", color: \"white\" }}></i></a></li>;\r\n            }\r\n            else if (this.state.climate_list[i].climate_id != this.state.climate_id) {\r\n                const index = i;\r\n                climate_list[i] = <li class=\"dropdown-item\" type=\"status\" style={{ background: \"transparent\" }}><a onClick={() => { this.selectClimate(index) }} href=\"javascript:;\">{this.state.climate_list[i].climate_name}</a></li>;\r\n            }\r\n        }\r\n        return climate_list;\r\n    }\r\n\r\n    loadNutrientList = () => {\r\n        const nutrient_list = [];\r\n        var i;\r\n        for (i = 0; i < this.state.nutrient_list.length; i++) {\r\n            if (this.state.nutrient_list[i].nutrient_id === this.state.nutrient_id) {\r\n                nutrient_list[i] = <li class=\"dropdown-item\" type=\"status\" style={{ background: \"transparent\" }}><a href=\"javascript:;\" id=\"current_tray\">{this.state.nutrient_list[i].nutrient_name} <i class=\"fa fa-check icon\" id=\"tray_check\" style={{ float: \"right\", marginRight: \"30px\", color: \"white\" }}></i></a></li>;\r\n            }\r\n            else if (this.state.nutrient_list[i].nutrient_id != this.state.nutrient_id) {\r\n                const index = i;\r\n                nutrient_list[i] = <li class=\"dropdown-item\" type=\"status\" style={{ background: \"transparent\" }}><a onClick={() => { this.selectNutrient(index) }} href=\"javascript:;\">{this.state.nutrient_list[i].nutrient_name}</a></li>;\r\n            }\r\n        }\r\n        return nutrient_list;\r\n    }\r\n\r\n    fetchTerrafarms() {\r\n        const customer_id = this.context.customer_id;\r\n        const requestBody = {\r\n            query: `\r\n                    query {\r\n                      terrafarms(customer_id: \"${customer_id}\") {\r\n                        _id\r\n                        unit_name\r\n                        low_light_mode\r\n                        led_brightness\r\n  \t                    climate_id\r\n                        nutrient_id\r\n                        num_trays\r\n                        trays_list {\r\n                          tray_number\r\n                          tray_id\r\n                          tray_name\r\n                          tray_type\r\n                          num_slots\r\n                          spacing_configuration\r\n                          serial_list\r\n                          par_multiplier_list\r\n                          plant_id_list\r\n                          plant_timestamp_list\r\n                          exp_harvest_timestamp_list\r\n                        }\r\n                      }\r\n                    }\r\n                `\r\n        };\r\n\r\n        fetch('http://localhost:8000/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n            .then(res => {\r\n                if (res.status != 200) {\r\n                    throw new Error('Failed.');\r\n                }\r\n                return res.json();\r\n            })\r\n            .then(resData => {\r\n                if (this.state.terrafarm_list = []) {\r\n                    this.setTerrafarm(resData.data.terrafarms);\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n    }\r\n\r\n    fetchTray = () => {\r\n        const _id = this.state.terrafarm_list[this.state.current_terrafarm]._id;\r\n        const tray_number = this.state.current_tray;\r\n        const requestBody = {\r\n            query: `\r\n                    query {\r\n                      tray(_id: \"${_id}\", tray_number: ${tray_number}) {\r\n                        tray_number\r\n                        tray_id\r\n                        tray_name\r\n                        tray_type\r\n                        num_slots\r\n                        spacing_configuration\r\n                        serial_list\r\n                        par_multiplier_list\r\n                        plant_id_list\r\n                        plant_timestamp_list\r\n                        exp_harvest_timestamp_list\r\n                      }\r\n                    }\r\n                `\r\n        };\r\n\r\n        fetch('http://localhost:8000/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n            .then(res => {\r\n                if (res.status != 200) {\r\n                    throw new Error('Failed.');\r\n                }\r\n                return res.json();\r\n            })\r\n            .then(resData => {\r\n                this.setState({\r\n                    tray_data: resData.data\r\n                });\r\n                this.state.tray_data = resData.data;\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n    }\r\n\r\n    fetchClimates() {\r\n        const requestBody = {\r\n            query: `\r\n                    query {\r\n                      climates {\r\n                        climate_id\r\n                        climate_name\r\n                        climate_description\r\n                      }\r\n                    }\r\n                `\r\n        };\r\n\r\n        fetch('http://localhost:8000/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n            .then(res => {\r\n                if (res.status != 200) {\r\n                    throw new Error('Failed.');\r\n                }\r\n                return res.json();\r\n            })\r\n            .then(resData => {\r\n                this.setState({\r\n                    climate_list: resData.data.climates\r\n                });\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n    }\r\n\r\n    fetchNutrients() {\r\n        const requestBody = {\r\n            query: `\r\n                    query {\r\n                      nutrients {\r\n                        nutrient_id\r\n                        nutrient_name\r\n                        nutrient_description\r\n                      }\r\n                    }\r\n                `\r\n        };\r\n\r\n        fetch('http://localhost:8000/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n            .then(res => {\r\n                if (res.status != 200) {\r\n                    throw new Error('Failed.');\r\n                }\r\n                return res.json();\r\n            })\r\n            .then(resData => {\r\n                this.setState({\r\n                    nutrient_list: resData.data.nutrients\r\n                });\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n    }\r\n\r\n    setClimate = () => {\r\n        const token = this.context.token\r\n        const requestBody = {\r\n            query: `\r\n                    mutation {\r\n                      updateClimate(_id: \"${this.state.terrafarm_list[this.state.current_terrafarm]._id}\", climate_id: \"${this.state.climate_id}\") {\r\n                        climate_id\r\n                      }\r\n                    }\r\n                `\r\n        };\r\n\r\n        fetch('http://localhost:8000/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: 'bearer ' + token\r\n            }\r\n        })\r\n            .then(res => {\r\n                if (res.status != 200) {\r\n                    throw new Error('Failed.');\r\n                }\r\n                return res.json();\r\n            })\r\n            .then(resData => {\r\n                console.log(resData.data)\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n    }\r\n\r\n    setNutrient = () => {\r\n        const token = this.context.token\r\n        const requestBody = {\r\n            query: `\r\n                    mutation {\r\n                      updateNutrient(_id: \"${this.state.terrafarm_list[this.state.current_terrafarm]._id}\", nutrient_id: \"${this.state.nutrient_id}\") {\r\n                        nutrient_id\r\n                      }\r\n                    }\r\n                `\r\n        };\r\n\r\n        fetch('http://localhost:8000/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: 'bearer ' + token\r\n            }\r\n        })\r\n            .then(res => {\r\n                if (res.status != 200) {\r\n                    throw new Error('Failed.');\r\n                }\r\n                return res.json();\r\n            })\r\n            .then(resData => {\r\n                console.log(resData.data)\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n    }\r\n\r\n    updateLed = () => {\r\n        const token = this.context.token\r\n\r\n        var led_brightness;\r\n        if (this.state.low_light_mode === true) {\r\n            led_brightness = Number(this.ledBrightnessElement.current.state.value);\r\n        }\r\n\r\n        if (this.state.low_light_mode === false) {\r\n            led_brightness = 100;\r\n        }\r\n\r\n        const requestBody = {\r\n            query: `\r\n                    mutation {\r\n                      updateLed(_id: \"${this.state.terrafarm_list[this.state.current_terrafarm]._id}\", low_light_mode: ${this.state.low_light_mode}, led_brightness: ${led_brightness}) {\r\n                        low_light_mode\r\n                        led_brightness\r\n                      }\r\n                    }\r\n                `\r\n        };\r\n\r\n        fetch('http://localhost:8000/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: 'bearer ' + token\r\n            }\r\n        })\r\n            .then(res => {\r\n                if (res.status != 200) {\r\n                    throw new Error('Failed.');\r\n                }\r\n                return res.json();\r\n            })\r\n            .then(resData => {\r\n                console.log(resData.data)\r\n                this.createLedNotification();\r\n                window.location.reload(false);\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n    }\r\n\r\n    createLedNotification = () => {\r\n        const token = this.context.token;\r\n        const customer_id = this.context.customer_id;\r\n\r\n        var requestBody;\r\n\r\n        if (this.state.low_light_mode === false) {\r\n            requestBody = {\r\n                query: `\r\n                    mutation {\r\n                      createNotification(notificationInput: {notification_type: \"info\", customer_id: \"${customer_id}\", notification_message: \"Your Terrafarm's lighting setting has been restored to optimal growth mode.\"}) {\r\n                        notification_type\r\n                        notification_message\r\n                        timestamp\r\n                      }\r\n                    }\r\n                `\r\n            };\r\n        }\r\n\r\n        else if (this.state.low_light_mode === true) {\r\n            requestBody = {\r\n                query: `\r\n                    mutation {\r\n                      createNotification(notificationInput: {notification_type: \"info\", customer_id: \"${customer_id}\", notification_message: \"Your Terrafarm's lighting setting has been changed to low light mode.\"}) {\r\n                        notification_type\r\n                        notification_message\r\n                        timestamp\r\n                      }\r\n                    }\r\n                `\r\n            };\r\n        }\r\n\r\n        fetch('http://localhost:8000/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: 'bearer ' + token\r\n            }\r\n        })\r\n            .then(res => {\r\n                if (res.status != 200) {\r\n                    throw new Error('Failed.');\r\n                }\r\n                return res.json();\r\n            })\r\n            .then(resData => {\r\n                console.log(resData.data)\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n    }\r\n\r\n    showSlider() {\r\n        if (this.state.low_light_mode === true) {\r\n            return (\r\n                <React.Fragment>\r\n                    <SliderAlt value={this.state.led_brightness} ref={this.ledBrightnessElement}/>\r\n                    <button class=\"button\" type=\"led-submit\" onClick={() => {this.updateLed()}}>SUBMIT</button>\r\n                </React.Fragment>\r\n            );\r\n        }\r\n    }\r\n\r\n    setLightMode = () => {\r\n        const previous = this.state.low_light_mode;\r\n        this.state.low_light_mode = !previous;\r\n        this.setState({\r\n            low_light_mode: !previous\r\n        });\r\n        if (this.state.low_light_mode === false) {\r\n            this.updateLed();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <head>\r\n                    <script type=\"text/javascript\" src=\"//code.jquery.com/jquery-3.5.1.js\"></script>\r\n                </head>\r\n                <body class=\"status-body\">\r\n                    <div class=\"grid-container\">\r\n                        <DashboardNavbars />\r\n                        <main class=\"main\" type=\"status\">\r\n                            <div class=\"main-cards\" type=\"status\">\r\n                                <div class=\"card\" type=\"status\">\r\n                                    <Tray tray_data={this.state.tray_data} _id={this.state._id} tray_number={this.state.current_tray} climate_id={this.state.climate_id} nutrient_id={this.state.nutrient_id}/>\r\n                                </div>\r\n                                <div class=\"card\" type=\"status\">\r\n                                    <h1>MY TERRAFARM</h1>\r\n                                    <div>\r\n                                        <a class=\"drop-button\" type=\"status\" href=\"#\" role=\"button\" id=\"dropdownMenuLink\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" style={{marginTop: \"7.5px\"}}>\r\n                                            Select Terrafarm\r\n                                        <i class=\"fa fa-caret-down fa-1x\" style={{ color: \"#ECECED\", marginLeft: \"20px\" }}>\r\n                                            </i>\r\n                                        </a>\r\n                                        <div class=\"dropdown-menu dropdown-menu-right\" type=\"status-tf\" aria-labelledby=\"dropdownMenuLink\">\r\n                                            {this.loadTerrafarmList()}\r\n                                        </div>\r\n                                        <h3 id=\"select-terrafarm1\" style={{ marginLeft: \"300px\", marginTop: \"-4px\" }}>Select which Terrafarm you would like to manage</h3>\r\n                                        <h3 id=\"select-terrafarm2\" style={{ marginLeft: \"300px\", marginTop: \"-4px\" }}>Select Terrafarm to manage</h3>\r\n                                    </div>\r\n                                    <div>\r\n                                        <a class=\"drop-button\" type=\"status\" href=\"#\" role=\"button\" id=\"dropdownMenuLink\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" style={{marginTop: \"10px\"}}>\r\n                                            Select Tray\r\n                                        <i class=\"fa fa-caret-down fa-1x\" style={{ color: \"#ECECED\", marginLeft: \"20px\" }}>\r\n                                            </i>\r\n                                        </a>\r\n                                        <div class=\"dropdown-menu dropdown-menu-right\" type=\"status-tf\" aria-labelledby=\"dropdownMenuLink\">\r\n                                            {this.loadTrayList()}\r\n                                        </div>\r\n                                        <h3 id=\"select-tray1\" style={{marginLeft: \"300px\", marginTop: \"-1px\"}}>Select which tray you would like to manage</h3>\r\n                                        <h3 id=\"select-tray2\" style={{marginLeft: \"300px\", marginTop: \"-1px\"}}>Select tray to manage</h3>\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"card\" type=\"status\">\r\n                                    <h1 id=\"led-header1\">LED BRIGHTNESS</h1>\r\n                                    <h2 id=\"low-light\">Low Light Mode</h2>\r\n                                    <h3 id=\"led-info1\">More information about both brightness settings to help you pick which one to use</h3>\r\n                                    <h3 id=\"led-info2\">More information about brightness settings</h3>\r\n                                    <h3 id=\"led-info3\">More info</h3>\r\n                                    <input type=\"checkbox\" class=\"light-mode-switch\" id=\"light-mode\" ref={this.lowLightModeElement} onClick={() => {this.setLightMode()}} checked={this.state.low_light_mode}/><label class=\"light-mode-label\" for=\"light-mode\"></label>\r\n                                    <button class=\"button\" type=\"small-white-led\"></button>\r\n                                    {this.showSlider()}\r\n                                </div>\r\n                                <div class=\"card\" type=\"status\">\r\n                                    <h1 id=\"climate-header1\">CLIMATE CONTROL</h1>\r\n                                    <h1 id=\"climate-header2\">CLIMATE</h1>\r\n                                    <a class=\"drop-button\" type=\"status\" href=\"#\" role=\"button\" id=\"dropdownMenuLink\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                                        Select Climate\r\n                                    <i class=\"fa fa-caret-down fa-1x\" style={{ color: \"#ECECED\", marginLeft: \"20px\" }}>\r\n                                        </i>\r\n                                    </a>\r\n                                    <div class=\"dropdown-menu dropdown-menu-right\" type=\"status\" aria-labelledby=\"dropdownMenuLink\">\r\n                                        {this.loadClimateList()}\r\n                                    </div>\r\n                                    <h3 id=\"climate-info1\" style={{ marginTop: \"5px\", lineHeight: \"24px\" }}>More information on climates</h3>\r\n                                    <h3 id=\"climate-info2\" style={{ marginTop: \"5px\", lineHeight: \"24px\" }}>More info</h3>\r\n                                    <button class=\"button\" type=\"small-white-climate\"></button>\r\n                                </div>\r\n                                <div class=\"card\" type=\"status\">\r\n                                    <h1 id=\"nutrient-header1\">NUTRIENT SELECTION</h1>\r\n                                    <h1 id=\"nutrient-header2\">NUTRIENT</h1>\r\n                                    <a class=\"drop-button\" type=\"status\" href=\"#\" role=\"button\" id=\"dropdownMenuLink\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                                        Select Nutrient\r\n                                    <i class=\"fa fa-caret-down fa-1x\" style={{ color: \"#ECECED\", marginLeft: \"20px\" }}>\r\n                                        </i>\r\n                                    </a>\r\n                                    <div class=\"dropdown-menu dropdown-menu-right\" type=\"status\" aria-labelledby=\"dropdownMenuLink\">\r\n                                        {this.loadNutrientList()}\r\n                                    </div>\r\n                                    <h3 id=\"nutrient-info1\" style={{ marginTop: \"5px\", lineHeight: \"24px\" }}>More information on nutrients</h3>\r\n                                    <h3 id=\"nutrient-info2\" style={{ marginTop: \"5px\", lineHeight: \"24px\" }}>More info</h3>\r\n                                    <button class=\"button\" type=\"small-white-climate\"></button>\r\n                                </div>\r\n                            </div>\r\n                        </main>\r\n                    </div>\r\n                </body>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Status;","E:\\Career\\Personal Website\\personal-website\\src\\Pages\\MyAccount\\Feedback.js",["160","161","162","163","164","165","166","167","168"],"E:\\Career\\Personal Website\\personal-website\\src\\Pages\\MyAccount\\MyProfile.js",["169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205"],"import React from 'react';\r\nimport \"./MyProfile.css\"\r\nimport 'bootstrap/dist/js/bootstrap.bundle';\r\nimport DashboardNavbars from \"../../Pages/MyAccount/DashboardNavbars.js\"\r\nimport $ from 'jquery'\r\n\r\nclass MyProfile extends React.Component {\r\n    state = {\r\n        address_id: null,\r\n        name: null,\r\n        address_line1: null,\r\n        address_line2: null,\r\n        city: null,\r\n        region: null,\r\n        post_code: null,\r\n        country: null,\r\n        phone: null,\r\n        email: null,\r\n        password: null,\r\n        language_preference: null,\r\n        account_type: null,\r\n        email_notifications: null,\r\n        automatic_shipments: null,\r\n        data_share: null,\r\n        country_options: ['United States', 'Canada'],\r\n        language_options: ['English', 'Spanish'],\r\n        account_options: ['Home', 'Business'],\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.nameElement = React.createRef();\r\n        this.addressLine1Element = React.createRef();\r\n        this.addressLine2Element = React.createRef();\r\n        this.cityElement = React.createRef();\r\n        this.regionElement = React.createRef();\r\n        this.zipElement = React.createRef();\r\n        this.phoneElement = React.createRef();\r\n        this.emailElement = React.createRef();\r\n        this.passwordElement = React.createRef();\r\n    }\r\n\r\n    setAddress = (primaryAddress) => {\r\n        var countryUpperCase = primaryAddress['country'];\r\n        const countryTitleCase = countryUpperCase.split(' ').map(w => w[0].toUpperCase() + w.substr(1).toLowerCase()).join(' ');\r\n\r\n        this.setState({\r\n            address_id: primaryAddress['address_id'],\r\n            address_line1: primaryAddress['address_line1'],\r\n            address_line2: primaryAddress['address_line2'],\r\n            city: primaryAddress['city'],\r\n            region: primaryAddress['region'],\r\n            post_code: primaryAddress['post_code'],\r\n            country: countryTitleCase\r\n        });\r\n    };\r\n\r\n    setCustomer = (customer) => {\r\n        this.setState({\r\n            name: customer['customer_name'],\r\n            phone: customer['customer_phone'],\r\n            email: customer['customer_email'],\r\n            password: customer['customer_password']\r\n        });\r\n    };\r\n\r\n    setAccountInfo = (accountinfo) => {\r\n        this.setState({\r\n            language_preference: accountinfo['language_preference'],\r\n            account_type: accountinfo['account_type'],\r\n            email_notifications: accountinfo['email_notifications'],\r\n            automatic_shipments: accountinfo['automatic_shipments'],\r\n            data_share: accountinfo['data_share']\r\n        });\r\n    };\r\n\r\n    setCountry = () => {\r\n        const country_list = [];\r\n        var i;\r\n        for (i = 0; i < this.state.country_options.length; i++) {\r\n            if (this.state.country_options[i] === this.state.country) {\r\n                country_list[i] = <li class=\"dropdown-item\" type=\"myprofile\" style={{ background: \"transparent\" }}><a href=\"javascript:;\">{this.state.country} <i class=\"fa fa-check icon\" style={{ float: \"right\", marginRight: \"50px\", color: \"#DE5E3B\" }}></i></a></li>;\r\n            }\r\n            if (this.state.country_options[i] != this.state.country) {\r\n                const x = this.state.country_options[i];\r\n                country_list[i] = <li class=\"dropdown-item\" type=\"myprofile\" style={{ background: \"transparent\" }}><a onClick={() => { this.changeCountry(x) }} href=\"javascript:;\">{this.state.country_options[i]} </a></li>;\r\n            }\r\n        }\r\n        return country_list;\r\n    }\r\n\r\n    setLanguage = () => {\r\n        const language_list = [];\r\n        var i;\r\n        for (i = 0; i < this.state.language_options.length; i++) {\r\n            if (this.state.language_options[i] === this.state.language_preference) {\r\n                language_list[i] = <li class=\"dropdown-item\" type=\"myprofile\" style={{ background: \"transparent\" }}><a href=\"javascript:;\">{this.state.language_preference}<i class=\"fa fa-check icon\" style={{ float: \"right\", marginRight: \"50px\", color: \"#DE5E3B\" }}></i></a></li>;\r\n            }\r\n            if (this.state.language_options[i] != this.state.language_preference) {\r\n                const x = this.state.language_options[i];\r\n                language_list[i] = <li class=\"dropdown-item\" type=\"myprofile\" style={{ background: \"transparent\" }}><a onClick={() => { this.changeLanguage(x) }} href=\"javascript:;\">{this.state.language_options[i]}</a></li>;\r\n            }\r\n        }\r\n        return language_list;\r\n    }\r\n\r\n    setAccountType = () => {\r\n        const account_list = [];\r\n        var i;\r\n        for (i = 0; i < this.state.account_options.length; i++) {\r\n            if (this.state.account_options[i] === this.state.account_type) {\r\n                account_list[i] = <li class=\"dropdown-item\" type=\"myprofile\" style={{ background: \"transparent\" }}><a href=\"javascript:;\">{this.state.account_type} <i class=\"fa fa-check icon\" style={{ float: \"right\", marginRight: \"50px\", color: \"#DE5E3B\" }}></i></a></li>;\r\n            }\r\n            if (this.state.account_options[i] != this.state.account_type) {\r\n                const x = this.state.account_options[i];\r\n                account_list[i] = <li class=\"dropdown-item\" type=\"myprofile\" style={{ background: \"transparent\" }}><a onClick={() => { this.changeAccountType(x) }} href=\"javascript:;\">{this.state.account_options[i]} </a></li>;\r\n            }\r\n        }\r\n        return account_list;\r\n    }\r\n\r\n    changeCountry = (country) => {\r\n        this.state.country = country;\r\n        this.updateAddress();\r\n    }\r\n\r\n    changeLanguage = (language) => {\r\n        this.state.language_preference = language;\r\n        this.updateAccountInfo();\r\n    }\r\n\r\n    changeAccountType = (accountType) => {\r\n        this.state.account_type = accountType;\r\n        this.updateAccountInfo();\r\n    }\r\n\r\n    changeEmailNotifications = () => {\r\n        const previous = this.state.email_notifications;\r\n        this.state.email_notifications = !previous;\r\n        this.updateAccountInfo();\r\n    }\r\n\r\n    changeAutomaticShipments = () => {\r\n        const previous = this.state.automatic_shipments;\r\n        this.state.automatic_shipments = !previous;\r\n        this.updateAccountInfo();\r\n    }\r\n\r\n    changeDataShare = () => {\r\n        const previous = this.state.data_share;\r\n        this.state.data_share = !previous;\r\n        this.updateAccountInfo();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchAddress();\r\n        this.fetchCustomer();\r\n        this.fetchAccountInfo();\r\n    }\r\n\r\n    updateAddress() {\r\n        const token = this.context.token;\r\n\r\n        const requestBody = {\r\n            query: `\r\n                mutation {\r\n                    updateAddress(address_id: \"${this.state.address_id}\", addressInput: {address_type: \"Primary\", address_line1: \"${this.state.address_line1}\", address_line2: \"${this.state.address_line2}\", city: \"${this.state.city}\", region: \"${this.state.region}\", post_code: \"${this.state.post_code}\", country: \"${this.state.country}\"}) {\r\n                        address_type\r\n                    }\r\n                }\r\n            `\r\n        };\r\n\r\n        fetch('http://localhost:8000/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: 'Bearer ' + token\r\n            }\r\n        })\r\n            .then(res => {\r\n                if (res.status !== 200) {\r\n                    throw new Error('Failed.');\r\n                }\r\n                return res.json();\r\n            })\r\n            .then(resData => {\r\n                this.fetchAddress();\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n    }\r\n\r\n    updateAccountInfo() {\r\n        const customer_id = this.context.customer_id;\r\n        const token = this.context.token; \r\n\r\n        const requestBody = {\r\n            query: `\r\n                mutation {\r\n                    updateAccountInfo(customer_id: \"${customer_id}\", accountInfoInput: { language_preference: \"${this.state.language_preference}\", account_type: \"${this.state.account_type}\", email_notifications: ${this.state.email_notifications}, automatic_shipments: ${this.state.automatic_shipments}, data_share: ${this.state.data_share} }) {\r\n                    language_preference\r\n                    account_type\r\n                    email_notifications\r\n                    automatic_shipments\r\n                    data_share\r\n                    }\r\n                }\r\n                `\r\n        };\r\n\r\n        fetch('http://localhost:8000/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: 'Bearer ' + token\r\n            }\r\n        })\r\n            .then(res => {\r\n                if (res.status != 200) {\r\n                    throw new Error('Failed.');\r\n                }\r\n                return res.json();\r\n            })\r\n            .then(resData => {\r\n                this.fetchAccountInfo();\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n    }\r\n\r\n    fetchAddress() {\r\n        const customer_id = this.context.customer_id\r\n        const requestBody = {\r\n            query: `\r\n                    query {\r\n                      customer(customer_id: \"${customer_id}\") {\r\n                        customer_name\r\n                        customer_email\r\n                        customer_password\r\n                        customer_phone\r\n                      }\r\n                    }\r\n                `\r\n        };\r\n\r\n        fetch('http://localhost:8000/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n            .then(res => {\r\n                if (res.status != 200) {\r\n                    throw new Error('Failed.');\r\n                }\r\n                return res.json();\r\n            })\r\n            .then(resData => {\r\n                const customer = resData.data['customer']\r\n                this.setCustomer(customer);\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n    }\r\n\r\n    fetchCustomer() {\r\n        const customer_id = this.context.customer_id\r\n        const requestBody = {\r\n            query: `\r\n                    query {\r\n                      addresses(customer_id: \"${customer_id}\") {\r\n                        address_id\r\n                        address_type\r\n                        address_line1\r\n                        address_line2\r\n                        city\r\n                        region\r\n                        post_code\r\n                        country\r\n                      }\r\n                    }\r\n                `\r\n        };\r\n\r\n        fetch('http://localhost:8000/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n            .then(res => {\r\n                if (res.status != 200) {\r\n                    throw new Error('Failed.');\r\n                }\r\n                return res.json();\r\n            })\r\n            .then(resData => {\r\n                const address_list = resData.data['addresses']\r\n                var i;\r\n                for (i = 0; i < address_list.length; i++) {\r\n                    if (address_list[i]['address_type'] === 'Primary') {\r\n                        this.setAddress(address_list[i]);\r\n                    }\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n    }\r\n\r\n    fetchAccountInfo() {\r\n        const customer_id = this.context.customer_id\r\n        const requestBody = {\r\n            query: `\r\n                    query {\r\n                      accountInfo(customer_id: \"${customer_id}\") {\r\n                        language_preference\r\n                        account_type\r\n                        email_notifications\r\n                        automatic_shipments\r\n                        data_share\r\n                      }\r\n                    }\r\n                `\r\n        };\r\n\r\n        fetch('http://localhost:8000/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n            .then(res => {\r\n                if (res.status != 200) {\r\n                    throw new Error('Failed.');\r\n                }\r\n                return res.json();\r\n            })\r\n            .then(resData => {\r\n                const accountinfo = resData.data['accountInfo']\r\n                this.setAccountInfo(accountinfo);\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n    }\r\n\r\n    submitHandler = (event) => {\r\n        event.preventDefault();\r\n        if (this.nameElement.current.value !== '') {\r\n            this.state.name = this.nameElement.current.value.split(' ').map(w => w[0].toUpperCase() + w.substr(1).toLowerCase()).join(' ');\r\n        }\r\n        if (this.addressLine1Element.current.value !== '') {\r\n            this.state.address_line1 = this.addressLine1Element.current.value.toUpperCase();\r\n        }\r\n        if (this.addressLine2Element.current.value !== '') {\r\n            this.state.address_line2 = this.addressLine2Element.current.value.toUpperCase();\r\n        }\r\n        if (this.cityElement.current.value !== '') {\r\n            this.state.city = this.cityElement.current.value.toUpperCase();\r\n        }\r\n        if (this.regionElement.current.value !== '') {\r\n            this.state.region = this.regionElement.current.value.toUpperCase();\r\n        }\r\n        if (this.zipElement.current.value !== '') {\r\n           this.state.post_code = this.zipElement.current.value.toUppercase();\r\n        }\r\n        if (this.phoneElement.current.value !== '') {\r\n            this.state.phone = this.phoneElement.current.value;\r\n        }\r\n        if (this.emailElement.current.value !== '') {\r\n            this.state.email = this.emailElement.current.value.toUpperCase();\r\n        }\r\n        if (this.passwordElement.current.value !== '') {\r\n            this.state.password = this.passwordElement.current.value.toUpperCase();\r\n        }\r\n\r\n        const customer_id = this.context.customer_id\r\n\r\n        const requestBody = {\r\n            query: `\r\n                mutation {\r\n                    updateCustomer(customer_id: \"${customer_id}\", customerInput: {customer_name: \"${this.state.name}\", customer_email: \"${this.state.email}\", customer_password: \"${this.state.password}\", customer_phone: \"${this.state.phone}\"}) {\r\n                        customer_name\r\n                    }\r\n                }\r\n            `\r\n        };\r\n\r\n        const token = this.context.token;\r\n\r\n        fetch('http://localhost:8000/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: 'Bearer ' + token\r\n            }\r\n        })\r\n            .then(res => {\r\n                if (res.status !== 200) {\r\n                    throw new Error('Failed.');\r\n                }\r\n                return res.json();\r\n            })\r\n            .then(resData => {\r\n                this.fetchCustomer();\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n\r\n        const requestBody2 = {\r\n            query: `\r\n                mutation {\r\n                    updateAddress(address_id: \"${this.state.address_id}\", addressInput: {address_type: \"Primary\", address_line1: \"${this.state.address_line1}\", address_line2: \"${this.state.address_line2}\", city: \"${this.state.city}\", region: \"${this.state.region}\", post_code: \"${this.state.post_code}\", country: \"${this.state.country}\"}) {\r\n                        address_type\r\n                    }\r\n                }\r\n            `\r\n        };\r\n\r\n        fetch('http://localhost:8000/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody2),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: 'Bearer ' + token\r\n            }\r\n        })\r\n            .then(res => {\r\n                if (res.status !== 200) {\r\n                    throw new Error('Failed.');\r\n                }\r\n                return res.json();\r\n            })\r\n            .then(resData => {\r\n                this.fetchAddress();\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n    }\r\n\r\n\r\n    render() {\r\n        $(document).ready(function () {\r\n            $(\".myprofile-info\").prop(\"disabled\", true);\r\n            $(\"#save\").prop(\"hidden\", true);\r\n            $(\"#edit\").click(function () {\r\n                $(\".myprofile-info\").prop(\"disabled\", false);\r\n                $(\"#save\").prop(\"hidden\", false);\r\n            });\r\n            $(\"#save\").click(function () {\r\n                $(\".myprofile-info\").prop(\"disabled\", true);\r\n            });\r\n        });\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <head>\r\n                    <script type=\"text/javascript\" src=\"//code.jquery.com/jquery-3.5.1.js\"></script>\r\n                </head>\r\n                <body class=\"myprofile-body\">\r\n                    <div class=\"grid-container\">\r\n                        <DashboardNavbars />\r\n                        <main class=\"main\" type=\"myprofile\">\r\n                            <div class=\"grid\">\r\n                                <div class=\"main-cards\" type=\"myprofile\">\r\n                                    <div class=\"card\" type=\"myprofile\">\r\n                                        <h1>MY TERRAFARM</h1>\r\n                                        <i class=\"fa fa-circle icon fa-10x\" style={{ position: \"absolute\", top: \"100px\", color: \"#808080\" }}></i>\r\n                                        <i class=\"fa fa-user icon fa-6x\" style={{ position: \"absolute\", top: \"130px\", color: \"#4F4F4F\" }}></i>\r\n                                        <h2>{this.state.name}</h2>\r\n                                        <h3>{this.state.email}</h3>\r\n                                        <button class=\"button\" type=\"myprofile-green\">OVERVIEW</button>\r\n                                        <button class=\"button\" type=\"myprofile-gray\" id=\"edit\">EDIT ACCOUNT</button>\r\n                                        <a href=\"/signin\"><button class=\"button\" type=\"myprofile-gray\" style={{ marginTop: \"275px\" }} onClick={this.context.logout}>SIGN OUT</button></a>\r\n                                    </div>\r\n                                    <div class=\"card\" type=\"myprofile\">\r\n                                        <h4>ACCOUNT INFO</h4>\r\n                                        <h5>NAME</h5>\r\n                                        <input class=\"myprofile-info\" placeholder={this.state.name} ref={this.nameElement}></input>\r\n                                        <h5>ADDRESS LINE 1</h5>\r\n                                        <input class=\"myprofile-info\" placeholder={this.state.address_line1} ref={this.addressLine1Element}></input>\r\n                                        <h5>ADDRESS LINE 2</h5>\r\n                                        <input class=\"myprofile-info\" placeholder={this.state.address_line2} ref={this.addressLine2Element}></input>\r\n                                        <h5>CITY</h5>\r\n                                        <input class=\"myprofile-info\" type=\"city\" placeholder={this.state.city} ref={this.cityElement}></input>\r\n                                        <h5 type=\"state\">STATE</h5>\r\n                                        <input class=\"myprofile-info\" type=\"state\" placeholder={this.state.region} ref={this.regionElement}></input>\r\n                                        <h5 type=\"zip\">ZIP</h5>\r\n                                        <input class=\"myprofile-info\" type=\"zip\" placeholder={this.state.post_code} ref={this.zipElement}></input>\r\n                                        <h5>PHONE NUMBER</h5>\r\n                                        <input class=\"myprofile-info\" placeholder={this.state.phone} ref={this.phoneElement}></input>\r\n                                        <h5>EMAIL ADDRESS</h5>\r\n                                        <input class=\"myprofile-info\" placeholder={this.state.email} ref={this.emailElement}></input>\r\n                                        <h5>PASSWORD</h5>\r\n                                        <input class=\"myprofile-info\" placeholder=\"**********\" ref={this.passwordElement}></input>\r\n                                        <button class=\"button\" type=\"myprofile-green-password\" style={{ marginTop: \"20px\" }} id=\"save\" onClick={this.submitHandler}>Save Changes</button>\r\n                                    </div>\r\n                                    <div class=\"card\" type=\"myprofile\">\r\n                                        <h4>SETTINGS</h4>\r\n                                        <div>\r\n                                            <h5>LANGUAGE</h5>\r\n                                            <a class=\"drop-button\" type=\"myprofile\" href=\"#\" role=\"button\" id=\"dropdownMenuLink\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" style={{ width: \"375px\" }}>\r\n                                                Select Language\r\n                                            <i class=\"fa fa-caret-down fa-1x\">\r\n                                                </i>\r\n                                            </a>\r\n                                            <div class=\"dropdown-menu dropdown-menu-right\" type=\"myprofile\" aria-labelledby=\"dropdownMenuLink\" style={{ width: \"375px\" }}>\r\n                                                {this.setLanguage()}\r\n                                            </div>\r\n                                        </div>\r\n                                        <div>\r\n                                            <h5>TYPE OF ACCOUNT</h5>\r\n                                            <a class=\"drop-button\" type=\"myprofile\" href=\"#\" role=\"button\" id=\"dropdownMenuLink\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" style={{ width: \"375px\" }}>\r\n                                                Select Account Type\r\n                                            <i class=\"fa fa-caret-down fa-1x\">\r\n                                                </i>\r\n                                            </a>\r\n                                            <div class=\"dropdown-menu dropdown-menu-right\" type=\"myprofile\" aria-labelledby=\"dropdownMenuLink\" style={{ width: \"375px\" }}>\r\n                                                {this.setAccountType()}\r\n                                            </div>\r\n                                        </div>\r\n                                        <div>\r\n                                            <h5>COUNTRY</h5>\r\n                                            <a class=\"drop-button\" type=\"myprofile\" href=\"#\" role=\"button\" id=\"dropdownMenuLink\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" style={{ width: \"375px\" }}>\r\n                                                Select Country\r\n                                            <i class=\"fa fa-caret-down fa-1x\">\r\n                                                </i>\r\n                                            </a>\r\n                                            <div class=\"dropdown-menu dropdown-menu-right\" type=\"myprofile\" aria-labelledby=\"dropdownMenuLink\" style={{ width: \"375px\" }}>\r\n                                                {this.setCountry()}\r\n                                            </div>\r\n                                        </div>\r\n                                        <h6 style={{ marginTop: \"50px\" }}>Email Notifications</h6>\r\n                                        <div class=\"toggle-container\"><input class=\"toggle-switch\" type=\"checkbox\" id=\"Email\" onChange={this.changeEmailNotifications} checked={this.state.email_notifications}/><label class=\"standard-label\" for=\"Email\"></label></div>\r\n                                        <h6>Automatic Shipments</h6>\r\n                                        <div class=\"toggle-container\"><input class=\"toggle-switch\" type=\"checkbox\" id=\"Auto\" onChange={this.changeAutomaticShipments} checked={this.state.automatic_shipments}/><label class=\"standard-label\" for=\"Auto\"></label></div>\r\n                                        <h6>Share Data With Terrafarm</h6>\r\n                                        <div class=\"toggle-container\"><input class=\"toggle-switch\" type=\"checkbox\" id=\"Data\" onChange={this.changeDataShare} checked={this.state.data_share}/><label class=\"standard-label\" for=\"Data\"></label></div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </main>\r\n                    </div>\r\n                </body>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MyProfile;","E:\\Career\\Personal Website\\personal-website\\src\\Pages\\Slider\\Slider.js",[],"E:\\Career\\Personal Website\\personal-website\\src\\Pages\\MyAccount\\DashboardNavbars.js",["206","207","208","209","210","211","212"],"E:\\Career\\Personal Website\\personal-website\\src\\Pages\\Slider\\SliderAlt.js",[],"E:\\Career\\Personal Website\\personal-website\\src\\Pages\\Trays\\Tray.js",["213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249"],"import React, { useState } from 'react';\r\nimport Modal from 'react-modal';\r\nimport './Tray.css'\r\nimport $ from 'jquery';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nclass Tray extends React.Component {\r\n    state = {\r\n        crop_list: [],\r\n        _id: \"\",\r\n        climate_id: \"\",\r\n        nutrient_id: \"\",\r\n        tray_number: null,\r\n        serial_list: [],\r\n        plant_id_list: [],\r\n        par_multiplier_list: [],\r\n        plant_timestamp_list: [],\r\n        exp_harvest_timestamp_list: [],\r\n        slots_list: [],\r\n        color_code_list: [],\r\n        shadow_color_list: [],\r\n        current_slot: null,\r\n        current_plant: \"\",\r\n        action: \"\",\r\n        show_plant_modal: false,\r\n        show_harvest_modal: false,\r\n        show_crop_details: \"hidden\",\r\n        crop_description: \"\",\r\n        cutting: false,\r\n        feedback: false,\r\n        redirect: false\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.weightElement = React.createRef();\r\n    }\r\n\r\n    componentDidUpdate(previousProps, previousState) {\r\n        if (previousProps !== this.props || !previousProps) {\r\n            if (this.props.tray_data.tray) {\r\n                this.setTray(this.props.tray_data.tray);\r\n                this.state._id = this.props._id;\r\n                this.state.climate_id = this.props.climate_id;\r\n                this.state.nutrient_id = this.props.nutrient_id;\r\n                this.state.tray_number = this.props.tray_number;\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadCrops();\r\n    }\r\n\r\n    changeCutting = () => {\r\n        const previous = this.state.cutting;\r\n        this.state.cutting = !previous;\r\n        this.setState({\r\n            cutting: !previous\r\n        });\r\n    }\r\n\r\n    changeFeedback = () => {\r\n        const previous = this.state.feedback;\r\n        this.state.feedback = !previous;\r\n        this.setState({\r\n            feedback: !previous\r\n        });\r\n    }\r\n\r\n    setTray = (tray) => {\r\n        this.state.serial_list = tray.serial_list;\r\n        this.state.plant_id_list = tray.plant_id_list;\r\n        this.state.par_multiplier_list = tray.par_multiplier_list;\r\n        this.state.plant_timestamp_list = tray.plant_timestamp_list;\r\n        this.state.exp_harvest_timestamp_list = tray.exp_harvest_timestamp_list;\r\n        this.loadSlots();\r\n    }\r\n\r\n    loadSlots = () => {\r\n        const slots_list = [];\r\n        const color_code_list = [];\r\n        const shadow_color_list = [];\r\n        var i;\r\n        for (i = 0; i < this.state.serial_list.length; i++) {\r\n            if (this.state.exp_harvest_timestamp_list[i] / 1 === 0) {\r\n                slots_list[i] = \"green\";\r\n                color_code_list[i] = \"#48AC6D\";\r\n                shadow_color_list[i] = \"#3D915C\";\r\n            }\r\n            else if ((new Date(this.state.exp_harvest_timestamp_list[i] / 1) - new Date()) / 86400000 < 2) {\r\n                slots_list[i] = \"red\";\r\n                color_code_list[i] = \"#DE5E3B\";\r\n                shadow_color_list[i] = \"#FF6D45\";\r\n            }\r\n            else {\r\n                slots_list[i] = \"yellow\";\r\n                color_code_list[i] = \"#E6CB22\";\r\n                shadow_color_list[i] = \"#DEC521\";\r\n            }\r\n        }\r\n        this.setState({\r\n            slots_list: slots_list,\r\n            color_code_list: color_code_list,\r\n            shadow_color_list: shadow_color_list\r\n        });\r\n    }\r\n\r\n    loadSlotInfo = (id) => {\r\n        var current_timestamp;\r\n        var action;\r\n        if (this.state.exp_harvest_timestamp_list[id] / 1 === 0) {\r\n            current_timestamp = \"\";\r\n            action = \"plant\";\r\n        }\r\n        else if (this.state.exp_harvest_timestamp_list[id]) {\r\n            current_timestamp = new Date(this.state.exp_harvest_timestamp_list[id] / 1).toDateString();\r\n            action = \"harvest\";\r\n        }\r\n\r\n        var plant;\r\n        if (this.state.plant_id_list[id] === \"\") {\r\n            plant = \"EMPTY\";\r\n        }\r\n        else {\r\n            plant = this.state.plant_id_list[id];\r\n        }\r\n\r\n        this.setState({\r\n            current_slot: id,\r\n            current_plant: plant.toUpperCase(),\r\n            current_timestamp: current_timestamp,\r\n            action: action\r\n        });\r\n    }\r\n\r\n    renderSlots = () => {\r\n        var slots_list = []\r\n        var i;\r\n        for (i = 0; i < this.state.serial_list.length; i++) {\r\n            const id = i;\r\n            slots_list[i] = <div class=\"slots-card\" id={id.toString()} type={this.state.slots_list[id]} onClick={() => this.loadSlotInfo(id)}></div>;\r\n        }\r\n        return slots_list;\r\n    }\r\n\r\n    submitHandler = () => {\r\n        this.createTrayNotification();\r\n        const token = this.context.token\r\n\r\n        if (this.state.action === \"plant\") {\r\n            var i;\r\n            var plant_id_list = [];\r\n            var plant_timestamp_list = [];\r\n            var exp_harvest_timestamp_list = [];\r\n            for (i = 0; i < this.state.serial_list.length; i++) {\r\n                plant_id_list[i] = '\"' + this.state.plant_id_list[i].toString() + '\"';\r\n                plant_timestamp_list[i] = '\"' + new Date(this.state.plant_timestamp_list[i] / 1).toISOString() + '\"';\r\n                exp_harvest_timestamp_list[i] = '\"' + new Date(this.state.exp_harvest_timestamp_list[i] / 1).toISOString() + '\"';\r\n            }\r\n\r\n            const requestBody = {\r\n                query: `\r\n                    mutation {\r\n                      updateTray(_id: \"${this.state._id}\", tray_number: ${this.state.tray_number}, plant_id_list: [${plant_id_list}], plant_timestamp_list: [${plant_timestamp_list}], exp_harvest_timestamp_list: [${exp_harvest_timestamp_list}]) {\r\n                        tray_number\r\n                        tray_id\r\n                        tray_name\r\n                        tray_type\r\n                        num_slots\r\n                        spacing_configuration\r\n                        serial_list\r\n                        par_multiplier_list\r\n                        plant_id_list\r\n                        plant_timestamp_list\r\n                        exp_harvest_timestamp_list\r\n                      }\r\n                    }\r\n                `\r\n            };\r\n\r\n            fetch('http://localhost:8000/graphql', {\r\n                method: 'POST',\r\n                body: JSON.stringify(requestBody),\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: 'Bearer ' + token\r\n                }\r\n            })\r\n            .then(res => {\r\n                if (res.status != 200) {\r\n                    throw new Error('Failed.');\r\n                }\r\n                return res.json();\r\n            })\r\n            .then(resData => {\r\n                this.setState({\r\n                    tray_data: resData.data\r\n                });\r\n                this.state.tray_data = resData.data;\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n        }\r\n        else if (this.state.action === \"harvest\") {\r\n            var plant = this.state.plant_id_list[this.state.current_slot];\r\n            var plant_timestamp = this.state.plant_timestamp_list[this.state.current_slot];\r\n            var exp_harvest_timestamp = this.state.exp_harvest_timestamp_list[this.state.current_slot];\r\n            var act_harvest_timestamp = new Date()\r\n\r\n            if (this.state.cutting === false) {\r\n                this.state.plant_id_list[this.state.current_slot] = \"\";\r\n                this.state.plant_timestamp_list[this.state.current_slot] = \"\";\r\n                this.state.exp_harvest_timestamp_list[this.state.current_slot] = \"\";\r\n\r\n                var i;\r\n                var plant_id_list = [];\r\n                var plant_timestamp_list = [];\r\n                var exp_harvest_timestamp_list = [];\r\n                for (i = 0; i < this.state.serial_list.length; i++) {\r\n                    plant_id_list[i] = '\"' + this.state.plant_id_list[i].toString() + '\"';\r\n                    plant_timestamp_list[i] = '\"' + new Date(this.state.plant_timestamp_list[i] / 1).toISOString() + '\"';\r\n                    exp_harvest_timestamp_list[i] = '\"' + new Date(this.state.exp_harvest_timestamp_list[i] / 1).toISOString() + '\"';\r\n                }\r\n\r\n                const requestBody1 = {\r\n                    query: `\r\n                        mutation {\r\n                          updateTray(_id: \"${this.state._id}\", tray_number: ${this.state.tray_number}, plant_id_list: [${plant_id_list}], plant_timestamp_list: [${plant_timestamp_list}], exp_harvest_timestamp_list: [${exp_harvest_timestamp_list}]) {\r\n                            tray_number\r\n                            tray_id\r\n                            tray_name\r\n                            tray_type\r\n                            num_slots\r\n                            spacing_configuration\r\n                            serial_list\r\n                            par_multiplier_list\r\n                            plant_id_list\r\n                            plant_timestamp_list\r\n                            exp_harvest_timestamp_list\r\n                          }\r\n                        }\r\n                    `\r\n                };\r\n\r\n                fetch('http://localhost:8000/graphql', {\r\n                    method: 'POST',\r\n                    body: JSON.stringify(requestBody1),\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        Authorization: 'Bearer ' + token\r\n                    }\r\n                })\r\n                .then(res => {\r\n                    if (res.status != 200) {\r\n                        throw new Error('Failed.');\r\n                    }\r\n                    return res.json();\r\n                })\r\n                .then(resData => {\r\n                    this.setState({\r\n                        tray_data: resData.data\r\n                    });\r\n                    this.state.tray_data = resData.data;\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                });\r\n            }\r\n\r\n            var plant_timestamp_iso = '\"' + new Date(plant_timestamp / 1).toISOString() + '\"';\r\n            var exp_harvest_timestamp_iso = '\"' + new Date(exp_harvest_timestamp / 1).toISOString() + '\"';\r\n            var act_harvest_timestamp_iso = '\"' + new Date(act_harvest_timestamp / 1).toISOString() + '\"';\r\n            var timestamp = '\"' + new Date().toISOString() + '\"';\r\n            var avg_growth_rate = Number(this.weightElement.current.value) / ((act_harvest_timestamp - plant_timestamp) / 86400000000);\r\n\r\n            const requestBody2 = {\r\n                query: `\r\n                    mutation {\r\n                      createHarvest(harvestInput: {unit_id: \"${this.state._id}\", customer_id: \"${this.context.customer_id}\", tray_number: ${this.state.tray_number}, serial_id: ${this.state.serial_list[this.state.current_slot]}, plant_id: \"${plant}\", climate_id: \"${this.state.climate_id}\", nutrient_id: \"${this.state.nutrient_id}\", par_multiplier: ${this.state.par_multiplier_list[this.state.current_slot]}, plant_timestamp: ${plant_timestamp_iso}, exp_harvest_timestamp: ${exp_harvest_timestamp_iso}, act_harvest_timestamp: ${act_harvest_timestamp_iso}, weight: ${Number(this.weightElement.current.value)}, avg_growth_rate: ${avg_growth_rate}, timestamp: ${timestamp}}) {\r\n                        tray_number\r\n                        serial_id\r\n                        plant_id\r\n                        climate_id\r\n                        nutrient_id\r\n                        par_multiplier\r\n                        plant_timestamp\r\n                        exp_harvest_timestamp\r\n                        act_harvest_timestamp\r\n                        weight\r\n                        avg_growth_rate\r\n                        timestamp\r\n                      }\r\n                    }\r\n                `\r\n            };\r\n            fetch('http://localhost:8000/graphql', {\r\n                method: 'POST',\r\n                body: JSON.stringify(requestBody2),\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: 'Bearer ' + token\r\n                }\r\n            })\r\n            .then(res => {\r\n                if (res.status != 200) {\r\n                    throw new Error('Failed.');\r\n                }\r\n                return res.json();\r\n            })\r\n            .then(resData => {\r\n\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n        }\r\n        this.hideModal();\r\n        if (this.state.feedback === true) {\r\n            this.setState({\r\n                redirect: true\r\n            });\r\n        }\r\n        else if (this.state.feedback === false) {\r\n            window.location.reload(false);\r\n        }\r\n    }\r\n\r\n    loadCrops() {\r\n        const requestBody = {\r\n            query: `\r\n                query {\r\n                  plants {\r\n                    plant_id\r\n                    plant_name\r\n                    plant_species\r\n                    plant_type\r\n                    spacing_configuration\r\n                    germination_period\r\n                    cuttings_io\r\n                    growth_period\r\n                    cuttings_period\r\n                    organic_io\r\n                    description\r\n                  }\r\n                }\r\n            `\r\n        };\r\n\r\n        fetch('http://localhost:8000/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n            .then(res => {\r\n                if (res.status != 200) {\r\n                    throw new Error('Failed.');\r\n                }\r\n                return res.json();\r\n            })\r\n            .then(resData => {\r\n                if (this.state.crop_list = []) {\r\n                    this.setState({\r\n                        crop_list: resData.data.plants\r\n                    });\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n    }\r\n\r\n    createTrayNotification = () => {\r\n        const token = this.context.token;\r\n        const customer_id = this.context.customer_id;\r\n        const notification_message = `You successfully ${this.state.action}ed a ${this.state.current_plant} crop!`;\r\n\r\n\r\n        const requestBody = {\r\n            query: `\r\n                mutation {\r\n                  createNotification(notificationInput: {notification_type: \"info\", customer_id: \"${customer_id}\", notification_message: \"${notification_message}\"}) {\r\n                    notification_type\r\n                    notification_message\r\n                    timestamp\r\n                  }\r\n                }\r\n            `\r\n        };\r\n\r\n        fetch('http://localhost:8000/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: 'bearer ' + token\r\n            }\r\n        })\r\n            .then(res => {\r\n                if (res.status != 200) {\r\n                    throw new Error('Failed.');\r\n                }\r\n                return res.json();\r\n            })\r\n            .then(resData => {\r\n                console.log(resData.data)\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n    }\r\n\r\n    setCrop = (index) => {\r\n        this.state.crop_description = this.state.crop_list[index].description;\r\n        this.state.current_plant = this.state.crop_list[index].plant_name\r\n        this.state.plant_id_list[this.state.current_slot] = this.state.crop_list[index].plant_name;\r\n        this.state.plant_timestamp_list[this.state.current_slot] = new Date();\r\n\r\n        var germ_range = this.state.crop_list[index].germination_period.split('-');\r\n        var avg_germ_time = (Number(germ_range[1]) + Number(germ_range[0])) / 2;\r\n\r\n        var grow_range = this.state.crop_list[index].growth_period.split('-');\r\n        var avg_grow_time = (Number(grow_range[1]) + Number(grow_range[0])) / 2;\r\n\r\n        var time_to_harvest = (avg_germ_time + avg_grow_time) * 86400000;\r\n\r\n        var exp_harvest_timestamp = new Date(this.state.plant_timestamp_list[this.state.current_slot] / 1 + time_to_harvest);\r\n\r\n        this.state.exp_harvest_timestamp_list[this.state.current_slot] = exp_harvest_timestamp;\r\n        this.state.current_timestamp = exp_harvest_timestamp.toDateString();\r\n\r\n        this.setState({\r\n            show_crop_details: \"visible\"\r\n        });\r\n    }\r\n\r\n    loadCropList = () => {\r\n        var crops = [];\r\n        var i;\r\n        for (i = 0; i < this.state.crop_list.length; i++) {\r\n            const index = i;\r\n            crops[i] = <li class=\"dropdown-item\" type=\"tray\" style={{ background: \"transparent\" }}><a onClick={() => { this.setCrop(index) }} href=\"javascript:;\">{this.state.crop_list[i].plant_name}</a></li>;\r\n        }\r\n        return crops;\r\n    }\r\n\r\n    hideModal = () => {\r\n        this.setState({\r\n            current_plant: \"\",\r\n            current_timestamp: \"\",\r\n            show_crop_details: \"hidden\",\r\n            show_plant_modal: false,\r\n            show_harvest_modal: false\r\n        });\r\n    }\r\n\r\n    showModal = () => {\r\n        if (this.state.action === \"plant\") {\r\n            this.setState({\r\n                show_plant_modal: true\r\n            });\r\n        }\r\n        else if(this.state.action === \"harvest\") {\r\n            this.setState({\r\n                show_harvest_modal: true\r\n            });\r\n        }\r\n    }\r\n\r\n    loadPlantModal = () => {\r\n        return (\r\n            <Modal\r\n                className=\"modal-backdrop\"\r\n                isOpen={this.state.show_plant_modal}\r\n                onClose={() => {this.hideModal()}}\r\n                transparent={true}\r\n            >\r\n                <div class=\"modal-main\">\r\n                    <i class=\"fa fa-times fa-1x\" style={{ float: \"right\", marginRight: \"30px\", marginTop: \"25px\", color: \"gray\", cursor: \"pointer\" }} onClick={() => {this.hideModal()}}></i>\r\n                    <h1 style={{ color: this.state.color_code_list[this.state.current_slot] }}>POD {this.state.current_slot}: {this.state.current_plant}</h1>\r\n                    <h2 style={{ marginTop: \"50px\" }}>\r\n                        Please select the crop you would like to plant.\r\n                        <a class=\"drop-button\" type=\"tray\" href=\"#\" role=\"button\" id=\"dropdownMenuLink\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" style={{marginTop: \"10px\"}}>\r\n                            Select Crop\r\n                        <i class=\"fa fa-caret-down fa-1x\" style={{ color: \"#ECECED\", marginLeft: \"20px\" }}>\r\n                            </i>\r\n                        </a>\r\n                        <div class=\"dropdown-menu dropdown-menu-right\" type=\"tray\" aria-labelledby=\"dropdownMenuLink\">\r\n                            {this.loadCropList()}\r\n                        </div>\r\n                    </h2>\r\n                    <h2 style={{ marginTop: \"50px\", visibility: this.state.show_crop_details }}>\r\n                        {this.state.crop_description}\r\n                    </h2>\r\n                    <h2 style={{ marginTop: \"50px\", visibility: this.state.show_crop_details }}>\r\n                        Expected harvest: {this.state.current_timestamp}\r\n                    </h2>\r\n                    <button class=\"button\" type=\"submit-plant\" id=\"submit\" onClick={ () => {this.submitHandler()} }>SUBMIT</button>\r\n                </div>\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    loadHarvestModal = () => {\r\n        return (\r\n            <Modal\r\n                className=\"modal-backdrop\"\r\n                isOpen={this.state.show_harvest_modal}\r\n                onClose={() => {this.hideModal()}}\r\n                transparent={true}\r\n            >\r\n                <div class=\"modal-main\">\r\n                    <i class=\"fa fa-times fa-1x\" style={{ float: \"right\", marginRight: \"30px\", marginTop: \"25px\", color: \"gray\", cursor: \"pointer\" }} onClick={() => {this.hideModal()}}></i>\r\n                    <h1 style={{ color: \"#DE5E3B\" }}>POD {this.state.current_slot}: {this.state.current_plant}</h1>\r\n                    <h2>Expected {this.state.action}: {this.state.current_timestamp}</h2>\r\n                    <h2 id=\"first-line\" style={{ marginTop: \"50px\" }}>\r\n                        Click the button if you are only taking a cutting from the plant. <br id=\"new-line\"/> Leave it unchecked if you are harvesting the full plant.\r\n                        <div style={{ position: \"absolute\", marginLeft: \"300px\", marginTop: \"-85px\" }}><input class=\"toggle-button-modal\" type=\"checkbox\" id=\"toggle-button1\" onChange={() => {this.changeCutting()}} checked={this.state.cutting}/><label class=\"modal-label\" for=\"toggle-button1\" type=\"cutting\"></label></div>\r\n                    </h2>\r\n                    <h2 style={{ marginTop: \"50px\" }}>\r\n                        Enter the weight of your harvest in kilograms:\r\n                        <input class=\"harvest-input\" type=\"weight\" placeholder=\"Weight (kg)\" ref={this.weightElement}></input>\r\n                    </h2>\r\n                    <h2 style={{ marginTop: \"50px\" }}>\r\n                        Click the button if you would like to provide additional feedback.\r\n                        <div style={{ position: \"absolute\", marginLeft: \"300px\", marginTop: \"-75px\" }}><input class=\"toggle-button-modal\" type=\"checkbox\" id=\"toggle-button2\" onChange={() => {this.changeFeedback()}} checked={this.state.feedback}/><label class=\"modal-label\" for=\"toggle-button2\" type=\"feedback\"></label></div>\r\n                    </h2>\r\n                    <button class=\"button\" type=\"submit-harvest\" id=\"submit\" onClick={ () => {this.submitHandler()} }>SUBMIT</button>\r\n                </div>\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    renderRedirect = () => {\r\n        if (this.state.redirect === true) {\r\n          return <Redirect to='/dashboard/feedback' />\r\n        }\r\n    }\r\n\r\n    render() {\r\n        var color = this.state.color_code_list[this.state.current_slot];\r\n        $(document).ready(function () {\r\n            $(\"#action\").css(\"background-color\", color);\r\n            $(\"#action\").on(\"mouseenter\", function () {\r\n                $(\"#action\").css(\"color\", color);\r\n            });\r\n            $(\"#action\").on(\"mouseleave\", function () {\r\n                $(\"#action\").css(\"color\", \"#F2F2F2\");\r\n            });\r\n        });\r\n        return (\r\n            <React.Fragment>\r\n                {this.renderRedirect()}\r\n                {this.loadPlantModal()}\r\n                {this.loadHarvestModal()}\r\n                <div class=\"slots-container\">\r\n                    <div class=\"slots-cards\">\r\n                        {this.renderSlots()}\r\n                    </div>\r\n                </div>\r\n                <div class=\"slot-info\">\r\n                    {this.state.current_plant && (\r\n                        <React.Fragment>\r\n                            <h1 style={{ color: this.state.color_code_list[this.state.current_slot] }}>POD {this.state.current_slot}: {this.state.current_plant}</h1>\r\n                            <button class=\"button\" id=\"action\" type=\"plant-harvest\" onClick={() => {this.showModal()} } style={{ boxShadow: `0 0 5px ${this.state.shadow_color_list[this.state.current_slot]}` }}>{this.state.action.toUpperCase()}</button>\r\n                        </React.Fragment>\r\n                    )}\r\n                    {(this.state.current_plant && this.state.plant_id_list[this.state.current_slot]) && (\r\n                        <React.Fragment>\r\n                            <h2>Expected {this.state.action}: {this.state.current_timestamp}</h2>\r\n                            <button class=\"button\" type=\"small-white\"></button>\r\n                            <h3 id=\"slotinfo-text1\">More information about harvesting this crop</h3>\r\n                            <h3 id=\"slotinfo-text2\">More info</h3>\r\n                        </React.Fragment>\r\n                    )}\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Tray",{"ruleId":"250","replacedBy":"251"},{"ruleId":"252","replacedBy":"253"},{"ruleId":"254","severity":1,"message":"255","line":2,"column":50,"nodeType":"256","messageId":"257","endLine":2,"endColumn":58},{"ruleId":"254","severity":1,"message":"258","line":3,"column":10,"nodeType":"256","messageId":"257","endLine":3,"endColumn":16},{"ruleId":"254","severity":1,"message":"259","line":3,"column":18,"nodeType":"256","messageId":"257","endLine":3,"endColumn":21},{"ruleId":"254","severity":1,"message":"260","line":3,"column":23,"nodeType":"256","messageId":"257","endLine":3,"endColumn":32},{"ruleId":"254","severity":1,"message":"261","line":4,"column":8,"nodeType":"256","messageId":"257","endLine":4,"endColumn":14},{"ruleId":"254","severity":1,"message":"262","line":6,"column":8,"nodeType":"256","messageId":"257","endLine":6,"endColumn":22},{"ruleId":"254","severity":1,"message":"258","line":2,"column":10,"nodeType":"256","messageId":"257","endLine":2,"endColumn":16},{"ruleId":"254","severity":1,"message":"259","line":2,"column":18,"nodeType":"256","messageId":"257","endLine":2,"endColumn":21},{"ruleId":"254","severity":1,"message":"263","line":4,"column":8,"nodeType":"256","messageId":"257","endLine":4,"endColumn":9},{"ruleId":"254","severity":1,"message":"261","line":13,"column":16,"nodeType":"256","messageId":"257","endLine":13,"endColumn":22},{"ruleId":"264","severity":1,"message":"265","line":93,"column":17,"nodeType":"256","messageId":"266","endLine":93,"endColumn":21},{"ruleId":"267","severity":1,"message":"268","line":123,"column":29,"nodeType":"269","endLine":123,"endColumn":51},{"ruleId":"270","severity":1,"message":"271","line":157,"column":29,"nodeType":"269","endLine":157,"endColumn":47},{"ruleId":"272","severity":1,"message":"273","line":335,"column":41,"nodeType":"269","endLine":335,"endColumn":140},{"ruleId":"272","severity":1,"message":"273","line":341,"column":41,"nodeType":"269","endLine":341,"endColumn":142},{"ruleId":"254","severity":1,"message":"274","line":2,"column":10,"nodeType":"256","messageId":"257","endLine":2,"endColumn":17},{"ruleId":"254","severity":1,"message":"259","line":3,"column":18,"nodeType":"256","messageId":"257","endLine":3,"endColumn":21},{"ruleId":"254","severity":1,"message":"260","line":3,"column":23,"nodeType":"256","messageId":"257","endLine":3,"endColumn":32},{"ruleId":"254","severity":1,"message":"261","line":6,"column":16,"nodeType":"256","messageId":"257","endLine":6,"endColumn":22},{"ruleId":"275","severity":1,"message":"276","line":18,"column":5,"nodeType":"277","messageId":"278","endLine":20,"endColumn":6},{"ruleId":"267","severity":1,"message":"279","line":42,"column":21,"nodeType":"269","endLine":42,"endColumn":194},{"ruleId":"267","severity":1,"message":"268","line":81,"column":37,"nodeType":"269","endLine":81,"endColumn":69},{"ruleId":"267","severity":1,"message":"268","line":122,"column":29,"nodeType":"269","endLine":122,"endColumn":61},{"ruleId":"272","severity":1,"message":"273","line":130,"column":33,"nodeType":"269","endLine":130,"endColumn":134},{"ruleId":"272","severity":1,"message":"273","line":135,"column":33,"nodeType":"269","endLine":135,"endColumn":132},{"ruleId":"254","severity":1,"message":"280","line":2,"column":27,"nodeType":"256","messageId":"257","endLine":2,"endColumn":33},{"ruleId":"254","severity":1,"message":"281","line":2,"column":35,"nodeType":"256","messageId":"257","endLine":2,"endColumn":41},{"ruleId":"254","severity":1,"message":"282","line":2,"column":43,"nodeType":"256","messageId":"257","endLine":2,"endColumn":48},{"ruleId":"254","severity":1,"message":"258","line":3,"column":10,"nodeType":"256","messageId":"257","endLine":3,"endColumn":16},{"ruleId":"254","severity":1,"message":"259","line":3,"column":18,"nodeType":"256","messageId":"257","endLine":3,"endColumn":21},{"ruleId":"254","severity":1,"message":"260","line":3,"column":23,"nodeType":"256","messageId":"257","endLine":3,"endColumn":32},{"ruleId":"254","severity":1,"message":"263","line":5,"column":8,"nodeType":"256","messageId":"257","endLine":5,"endColumn":9},{"ruleId":"254","severity":1,"message":"283","line":6,"column":10,"nodeType":"256","messageId":"257","endLine":6,"endColumn":18},{"ruleId":"254","severity":1,"message":"284","line":6,"column":20,"nodeType":"256","messageId":"257","endLine":6,"endColumn":34},{"ruleId":"254","severity":1,"message":"285","line":6,"column":36,"nodeType":"256","messageId":"257","endLine":6,"endColumn":44},{"ruleId":"275","severity":1,"message":"276","line":16,"column":5,"nodeType":"277","messageId":"278","endLine":18,"endColumn":6},{"ruleId":"286","severity":1,"message":"287","line":48,"column":32,"nodeType":"288","messageId":"289","endLine":48,"endColumn":34},{"ruleId":"290","severity":1,"message":"291","line":57,"column":17,"nodeType":"292","endLine":57,"endColumn":27},{"ruleId":"286","severity":1,"message":"287","line":89,"column":32,"nodeType":"288","messageId":"289","endLine":89,"endColumn":34},{"ruleId":"275","severity":1,"message":"276","line":31,"column":5,"nodeType":"277","messageId":"278","endLine":33,"endColumn":6},{"ruleId":"286","severity":1,"message":"287","line":53,"column":70,"nodeType":"288","messageId":"289","endLine":53,"endColumn":72},{"ruleId":"286","severity":1,"message":"287","line":234,"column":32,"nodeType":"288","messageId":"289","endLine":234,"endColumn":34},{"ruleId":"286","severity":1,"message":"287","line":278,"column":32,"nodeType":"288","messageId":"289","endLine":278,"endColumn":34},{"ruleId":"286","severity":1,"message":"287","line":316,"column":32,"nodeType":"288","messageId":"289","endLine":316,"endColumn":34},{"ruleId":"286","severity":1,"message":"287","line":355,"column":32,"nodeType":"288","messageId":"289","endLine":355,"endColumn":34},{"ruleId":"254","severity":1,"message":"293","line":372,"column":15,"nodeType":"256","messageId":"257","endLine":372,"endColumn":26},{"ruleId":"286","severity":1,"message":"287","line":396,"column":36,"nodeType":"288","messageId":"289","endLine":396,"endColumn":38},{"ruleId":"294","severity":1,"message":"295","line":401,"column":23,"nodeType":"296","messageId":"297","endLine":413,"endColumn":18},{"ruleId":"286","severity":1,"message":"287","line":469,"column":54,"nodeType":"288","messageId":"289","endLine":469,"endColumn":56},{"ruleId":"286","severity":1,"message":"287","line":495,"column":54,"nodeType":"288","messageId":"289","endLine":495,"endColumn":56},{"ruleId":"286","severity":1,"message":"287","line":522,"column":54,"nodeType":"288","messageId":"289","endLine":522,"endColumn":56},{"ruleId":"254","severity":1,"message":"263","line":8,"column":8,"nodeType":"256","messageId":"257","endLine":8,"endColumn":9},{"ruleId":"290","severity":1,"message":"291","line":62,"column":9,"nodeType":"292","endLine":62,"endColumn":19},{"ruleId":"290","severity":1,"message":"291","line":63,"column":9,"nodeType":"292","endLine":63,"endColumn":19},{"ruleId":"290","severity":1,"message":"291","line":71,"column":9,"nodeType":"292","endLine":71,"endColumn":19},{"ruleId":"267","severity":1,"message":"279","line":94,"column":115,"nodeType":"269","endLine":94,"endColumn":161},{"ruleId":"298","severity":1,"message":"299","line":94,"column":123,"nodeType":"300","messageId":"301","endLine":94,"endColumn":137},{"ruleId":"286","severity":1,"message":"287","line":96,"column":56,"nodeType":"288","messageId":"289","endLine":96,"endColumn":58},{"ruleId":"267","severity":1,"message":"279","line":99,"column":115,"nodeType":"269","endLine":99,"endColumn":197},{"ruleId":"298","severity":1,"message":"299","line":99,"column":182,"nodeType":"300","messageId":"301","endLine":99,"endColumn":196},{"ruleId":"267","severity":1,"message":"279","line":110,"column":110,"nodeType":"269","endLine":110,"endColumn":151},{"ruleId":"298","severity":1,"message":"299","line":110,"column":118,"nodeType":"300","messageId":"301","endLine":110,"endColumn":132},{"ruleId":"286","severity":1,"message":"287","line":112,"column":102,"nodeType":"288","messageId":"289","endLine":112,"endColumn":104},{"ruleId":"267","severity":1,"message":"279","line":115,"column":110,"nodeType":"269","endLine":115,"endColumn":182},{"ruleId":"298","severity":1,"message":"299","line":115,"column":167,"nodeType":"300","messageId":"301","endLine":115,"endColumn":181},{"ruleId":"267","severity":1,"message":"279","line":126,"column":113,"nodeType":"269","endLine":126,"endColumn":154},{"ruleId":"298","severity":1,"message":"299","line":126,"column":121,"nodeType":"300","messageId":"301","endLine":126,"endColumn":135},{"ruleId":"286","severity":1,"message":"287","line":128,"column":60,"nodeType":"288","messageId":"289","endLine":128,"endColumn":62},{"ruleId":"267","severity":1,"message":"279","line":130,"column":113,"nodeType":"269","endLine":130,"endColumn":182},{"ruleId":"298","severity":1,"message":"299","line":130,"column":167,"nodeType":"300","messageId":"301","endLine":130,"endColumn":181},{"ruleId":"267","severity":1,"message":"279","line":141,"column":114,"nodeType":"269","endLine":141,"endColumn":155},{"ruleId":"298","severity":1,"message":"299","line":141,"column":122,"nodeType":"300","messageId":"301","endLine":141,"endColumn":136},{"ruleId":"286","severity":1,"message":"287","line":143,"column":62,"nodeType":"288","messageId":"289","endLine":143,"endColumn":64},{"ruleId":"267","severity":1,"message":"279","line":145,"column":114,"nodeType":"269","endLine":145,"endColumn":184},{"ruleId":"298","severity":1,"message":"299","line":145,"column":169,"nodeType":"300","messageId":"301","endLine":145,"endColumn":183},{"ruleId":"286","severity":1,"message":"287","line":190,"column":32,"nodeType":"288","messageId":"289","endLine":190,"endColumn":34},{"ruleId":"302","severity":1,"message":"303","line":196,"column":21,"nodeType":"304","messageId":"305","endLine":196,"endColumn":51},{"ruleId":"290","severity":1,"message":"291","line":196,"column":21,"nodeType":"292","endLine":196,"endColumn":31},{"ruleId":"286","severity":1,"message":"287","line":236,"column":32,"nodeType":"288","messageId":"289","endLine":236,"endColumn":34},{"ruleId":"290","severity":1,"message":"291","line":245,"column":17,"nodeType":"292","endLine":245,"endColumn":27},{"ruleId":"286","severity":1,"message":"287","line":273,"column":32,"nodeType":"288","messageId":"289","endLine":273,"endColumn":34},{"ruleId":"286","severity":1,"message":"287","line":309,"column":32,"nodeType":"288","messageId":"289","endLine":309,"endColumn":34},{"ruleId":"286","severity":1,"message":"287","line":345,"column":32,"nodeType":"288","messageId":"289","endLine":345,"endColumn":34},{"ruleId":"286","severity":1,"message":"287","line":379,"column":32,"nodeType":"288","messageId":"289","endLine":379,"endColumn":34},{"ruleId":"286","severity":1,"message":"287","line":424,"column":32,"nodeType":"288","messageId":"289","endLine":424,"endColumn":34},{"ruleId":"286","severity":1,"message":"287","line":482,"column":32,"nodeType":"288","messageId":"289","endLine":482,"endColumn":34},{"ruleId":"290","severity":1,"message":"291","line":508,"column":9,"nodeType":"292","endLine":508,"endColumn":19},{"ruleId":"267","severity":1,"message":"279","line":534,"column":41,"nodeType":"269","endLine":534,"endColumn":218},{"ruleId":"267","severity":1,"message":"279","line":546,"column":41,"nodeType":"269","endLine":546,"endColumn":217},{"ruleId":"267","severity":1,"message":"279","line":571,"column":37,"nodeType":"269","endLine":571,"endColumn":185},{"ruleId":"267","severity":1,"message":"279","line":586,"column":37,"nodeType":"269","endLine":586,"endColumn":185},{"ruleId":"286","severity":1,"message":"287","line":59,"column":32,"nodeType":"288","messageId":"289","endLine":59,"endColumn":34},{"ruleId":"254","severity":1,"message":"306","line":71,"column":25,"nodeType":"256","messageId":"257","endLine":71,"endColumn":26},{"ruleId":"290","severity":1,"message":"291","line":77,"column":17,"nodeType":"292","endLine":77,"endColumn":27},{"ruleId":"267","severity":1,"message":"279","line":93,"column":116,"nodeType":"269","endLine":93,"endColumn":196},{"ruleId":"298","severity":1,"message":"299","line":93,"column":181,"nodeType":"300","messageId":"301","endLine":93,"endColumn":195},{"ruleId":"267","severity":1,"message":"279","line":96,"column":116,"nodeType":"269","endLine":96,"endColumn":175},{"ruleId":"298","severity":1,"message":"299","line":96,"column":160,"nodeType":"300","messageId":"301","endLine":96,"endColumn":174},{"ruleId":"290","severity":1,"message":"291","line":104,"column":9,"nodeType":"292","endLine":104,"endColumn":19},{"ruleId":"267","severity":1,"message":"279","line":191,"column":41,"nodeType":"269","endLine":191,"endColumn":192},{"ruleId":"267","severity":1,"message":"279","line":83,"column":116,"nodeType":"269","endLine":83,"endColumn":139},{"ruleId":"298","severity":1,"message":"299","line":83,"column":124,"nodeType":"300","messageId":"301","endLine":83,"endColumn":138},{"ruleId":"286","severity":1,"message":"287","line":85,"column":47,"nodeType":"288","messageId":"289","endLine":85,"endColumn":49},{"ruleId":"267","severity":1,"message":"279","line":87,"column":116,"nodeType":"269","endLine":87,"endColumn":181},{"ruleId":"298","severity":1,"message":"299","line":87,"column":166,"nodeType":"300","messageId":"301","endLine":87,"endColumn":180},{"ruleId":"267","severity":1,"message":"279","line":98,"column":117,"nodeType":"269","endLine":98,"endColumn":140},{"ruleId":"298","severity":1,"message":"299","line":98,"column":125,"nodeType":"300","messageId":"301","endLine":98,"endColumn":139},{"ruleId":"286","severity":1,"message":"287","line":100,"column":48,"nodeType":"288","messageId":"289","endLine":100,"endColumn":50},{"ruleId":"267","severity":1,"message":"279","line":102,"column":117,"nodeType":"269","endLine":102,"endColumn":183},{"ruleId":"298","severity":1,"message":"299","line":102,"column":168,"nodeType":"300","messageId":"301","endLine":102,"endColumn":182},{"ruleId":"267","severity":1,"message":"279","line":113,"column":116,"nodeType":"269","endLine":113,"endColumn":139},{"ruleId":"298","severity":1,"message":"299","line":113,"column":124,"nodeType":"300","messageId":"301","endLine":113,"endColumn":138},{"ruleId":"286","severity":1,"message":"287","line":115,"column":47,"nodeType":"288","messageId":"289","endLine":115,"endColumn":49},{"ruleId":"267","severity":1,"message":"279","line":117,"column":116,"nodeType":"269","endLine":117,"endColumn":185},{"ruleId":"298","severity":1,"message":"299","line":117,"column":170,"nodeType":"300","messageId":"301","endLine":117,"endColumn":184},{"ruleId":"290","severity":1,"message":"291","line":124,"column":9,"nodeType":"292","endLine":124,"endColumn":19},{"ruleId":"290","severity":1,"message":"291","line":129,"column":9,"nodeType":"292","endLine":129,"endColumn":19},{"ruleId":"290","severity":1,"message":"291","line":134,"column":9,"nodeType":"292","endLine":134,"endColumn":19},{"ruleId":"290","severity":1,"message":"291","line":140,"column":9,"nodeType":"292","endLine":140,"endColumn":19},{"ruleId":"290","severity":1,"message":"291","line":146,"column":9,"nodeType":"292","endLine":146,"endColumn":19},{"ruleId":"290","severity":1,"message":"291","line":152,"column":9,"nodeType":"292","endLine":152,"endColumn":19},{"ruleId":"286","severity":1,"message":"287","line":226,"column":32,"nodeType":"288","messageId":"289","endLine":226,"endColumn":34},{"ruleId":"286","severity":1,"message":"287","line":262,"column":32,"nodeType":"288","messageId":"289","endLine":262,"endColumn":34},{"ruleId":"286","severity":1,"message":"287","line":303,"column":32,"nodeType":"288","messageId":"289","endLine":303,"endColumn":34},{"ruleId":"286","severity":1,"message":"287","line":346,"column":32,"nodeType":"288","messageId":"289","endLine":346,"endColumn":34},{"ruleId":"290","severity":1,"message":"291","line":363,"column":13,"nodeType":"292","endLine":363,"endColumn":23},{"ruleId":"290","severity":1,"message":"291","line":366,"column":13,"nodeType":"292","endLine":366,"endColumn":23},{"ruleId":"290","severity":1,"message":"291","line":369,"column":13,"nodeType":"292","endLine":369,"endColumn":23},{"ruleId":"290","severity":1,"message":"291","line":372,"column":13,"nodeType":"292","endLine":372,"endColumn":23},{"ruleId":"290","severity":1,"message":"291","line":375,"column":13,"nodeType":"292","endLine":375,"endColumn":23},{"ruleId":"290","severity":1,"message":"291","line":378,"column":12,"nodeType":"292","endLine":378,"endColumn":22},{"ruleId":"290","severity":1,"message":"291","line":381,"column":13,"nodeType":"292","endLine":381,"endColumn":23},{"ruleId":"290","severity":1,"message":"291","line":384,"column":13,"nodeType":"292","endLine":384,"endColumn":23},{"ruleId":"290","severity":1,"message":"291","line":387,"column":13,"nodeType":"292","endLine":387,"endColumn":23},{"ruleId":"267","severity":1,"message":"279","line":518,"column":45,"nodeType":"269","endLine":518,"endColumn":223},{"ruleId":"267","severity":1,"message":"279","line":529,"column":45,"nodeType":"269","endLine":529,"endColumn":223},{"ruleId":"267","severity":1,"message":"279","line":540,"column":45,"nodeType":"269","endLine":540,"endColumn":223},{"ruleId":"286","severity":1,"message":"287","line":39,"column":32,"nodeType":"288","messageId":"289","endLine":39,"endColumn":34},{"ruleId":"290","severity":1,"message":"291","line":48,"column":17,"nodeType":"292","endLine":48,"endColumn":27},{"ruleId":"286","severity":1,"message":"287","line":78,"column":32,"nodeType":"288","messageId":"289","endLine":78,"endColumn":34},{"ruleId":"290","severity":1,"message":"291","line":87,"column":17,"nodeType":"292","endLine":87,"endColumn":27},{"ruleId":"254","severity":1,"message":"307","line":98,"column":19,"nodeType":"256","messageId":"257","endLine":98,"endColumn":24},{"ruleId":"267","severity":1,"message":"279","line":122,"column":37,"nodeType":"269","endLine":122,"endColumn":191},{"ruleId":"267","severity":1,"message":"279","line":130,"column":37,"nodeType":"269","endLine":130,"endColumn":186},{"ruleId":"254","severity":1,"message":"308","line":1,"column":17,"nodeType":"256","messageId":"257","endLine":1,"endColumn":25},{"ruleId":"290","severity":1,"message":"291","line":46,"column":17,"nodeType":"292","endLine":46,"endColumn":27},{"ruleId":"290","severity":1,"message":"291","line":47,"column":17,"nodeType":"292","endLine":47,"endColumn":27},{"ruleId":"290","severity":1,"message":"291","line":48,"column":17,"nodeType":"292","endLine":48,"endColumn":27},{"ruleId":"290","severity":1,"message":"291","line":49,"column":17,"nodeType":"292","endLine":49,"endColumn":27},{"ruleId":"290","severity":1,"message":"291","line":60,"column":9,"nodeType":"292","endLine":60,"endColumn":19},{"ruleId":"290","severity":1,"message":"291","line":68,"column":9,"nodeType":"292","endLine":68,"endColumn":19},{"ruleId":"290","severity":1,"message":"291","line":75,"column":9,"nodeType":"292","endLine":75,"endColumn":19},{"ruleId":"290","severity":1,"message":"291","line":76,"column":9,"nodeType":"292","endLine":76,"endColumn":19},{"ruleId":"290","severity":1,"message":"291","line":77,"column":9,"nodeType":"292","endLine":77,"endColumn":19},{"ruleId":"290","severity":1,"message":"291","line":78,"column":9,"nodeType":"292","endLine":78,"endColumn":19},{"ruleId":"290","severity":1,"message":"291","line":79,"column":9,"nodeType":"292","endLine":79,"endColumn":19},{"ruleId":"286","severity":1,"message":"287","line":194,"column":32,"nodeType":"288","messageId":"289","endLine":194,"endColumn":34},{"ruleId":"290","severity":1,"message":"291","line":203,"column":17,"nodeType":"292","endLine":203,"endColumn":27},{"ruleId":"290","severity":1,"message":"291","line":216,"column":17,"nodeType":"292","endLine":216,"endColumn":41},{"ruleId":"290","severity":1,"message":"291","line":217,"column":17,"nodeType":"292","endLine":217,"endColumn":48},{"ruleId":"290","severity":1,"message":"291","line":218,"column":17,"nodeType":"292","endLine":218,"endColumn":54},{"ruleId":"264","severity":1,"message":"309","line":220,"column":21,"nodeType":"256","messageId":"266","endLine":220,"endColumn":22},{"ruleId":"264","severity":1,"message":"310","line":221,"column":21,"nodeType":"256","messageId":"266","endLine":221,"endColumn":34},{"ruleId":"264","severity":1,"message":"311","line":222,"column":21,"nodeType":"256","messageId":"266","endLine":222,"endColumn":41},{"ruleId":"264","severity":1,"message":"312","line":223,"column":21,"nodeType":"256","messageId":"266","endLine":223,"endColumn":47},{"ruleId":"286","severity":1,"message":"287","line":259,"column":36,"nodeType":"288","messageId":"289","endLine":259,"endColumn":38},{"ruleId":"290","severity":1,"message":"291","line":268,"column":21,"nodeType":"292","endLine":268,"endColumn":31},{"ruleId":"286","severity":1,"message":"287","line":310,"column":32,"nodeType":"288","messageId":"289","endLine":310,"endColumn":34},{"ruleId":"286","severity":1,"message":"287","line":362,"column":32,"nodeType":"288","messageId":"289","endLine":362,"endColumn":34},{"ruleId":"302","severity":1,"message":"303","line":368,"column":21,"nodeType":"304","messageId":"305","endLine":368,"endColumn":46},{"ruleId":"290","severity":1,"message":"291","line":368,"column":21,"nodeType":"292","endLine":368,"endColumn":31},{"ruleId":"286","severity":1,"message":"287","line":406,"column":32,"nodeType":"288","messageId":"289","endLine":406,"endColumn":34},{"ruleId":"290","severity":1,"message":"291","line":420,"column":9,"nodeType":"292","endLine":420,"endColumn":19},{"ruleId":"290","severity":1,"message":"291","line":421,"column":9,"nodeType":"292","endLine":421,"endColumn":19},{"ruleId":"290","severity":1,"message":"291","line":422,"column":9,"nodeType":"292","endLine":422,"endColumn":33},{"ruleId":"290","severity":1,"message":"291","line":423,"column":9,"nodeType":"292","endLine":423,"endColumn":40},{"ruleId":"290","severity":1,"message":"291","line":435,"column":9,"nodeType":"292","endLine":435,"endColumn":46},{"ruleId":"290","severity":1,"message":"291","line":436,"column":9,"nodeType":"292","endLine":436,"endColumn":19},{"ruleId":"267","severity":1,"message":"279","line":448,"column":100,"nodeType":"269","endLine":448,"endColumn":163},{"ruleId":"298","severity":1,"message":"299","line":448,"column":148,"nodeType":"300","messageId":"301","endLine":448,"endColumn":162},{"ruleId":"267","severity":1,"message":"279","line":489,"column":25,"nodeType":"269","endLine":489,"endColumn":199},"no-native-reassign",["313"],"no-negated-in-lhs",["314"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'Navbar' is defined but never used.","'Nav' is defined but never used.","'Jumbotron' is defined but never used.","'Scroll' is defined but never used.","'PersonalNavbar' is defined but never used.","'$' is defined but never used.","no-redeclare","'card' is already defined.","redeclared","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'NavLink' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'Router' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'Dropdown' is defined but never used.","'DropdownButton' is defined but never used.","'MenuItem' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","'customer_id' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'i'.","ArrowFunctionExpression","unsafeRefs","no-script-url","Script URL is a form of eval.","Literal","unexpectedScriptURL","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","'j' is assigned a value but never used.","'index' is assigned a value but never used.","'useState' is defined but never used.","'i' is already defined.","'plant_id_list' is already defined.","'plant_timestamp_list' is already defined.","'exp_harvest_timestamp_list' is already defined.","no-global-assign","no-unsafe-negation"]